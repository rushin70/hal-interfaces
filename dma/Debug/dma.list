
dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005744  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  080058d4  080058d4  000068d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a68  08005a68  000070ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005a68  08005a68  00006a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a70  08005a70  000070ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a70  08005a70  00006a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a74  08005a74  00006a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ec  20000000  08005a78  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  200000ec  08005b64  000070ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08005b64  000074c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f614  00000000  00000000  0000711c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002273  00000000  00000000  00016730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  000189a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a27  00000000  00000000  00019698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002622b  00000000  00000000  0001a0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010753  00000000  00000000  000402ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9778  00000000  00000000  00050a3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013a1b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ab8  00000000  00000000  0013a1f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0013dcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ec 	.word	0x200000ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080058bc 	.word	0x080058bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	080058bc 	.word	0x080058bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fc79 	bl	8000ea6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f832 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f910 	bl	80007dc <MX_GPIO_Init>
  MX_DMA_Init();
 80005bc:	f000 f8f0 	bl	80007a0 <MX_DMA_Init>
  MX_UART4_Init();
 80005c0:	f000 f8be 	bl	8000740 <MX_UART4_Init>
  MX_I2C1_Init();
 80005c4:	f000 f87c 	bl	80006c0 <MX_I2C1_Init>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart4, rx_buffer, sizeof(rx_buffer));
 80005c8:	2240      	movs	r2, #64	@ 0x40
 80005ca:	490e      	ldr	r1, [pc, #56]	@ (8000604 <main+0x58>)
 80005cc:	480e      	ldr	r0, [pc, #56]	@ (8000608 <main+0x5c>)
 80005ce:	f004 fc4b 	bl	8004e68 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);  // Optional: suppress half-transfer interrupt
 80005d2:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <main+0x60>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <main+0x60>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f022 0204 	bic.w	r2, r2, #4
 80005e0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart4,&rx_data,1);
 80005e2:	2201      	movs	r2, #1
 80005e4:	490a      	ldr	r1, [pc, #40]	@ (8000610 <main+0x64>)
 80005e6:	4808      	ldr	r0, [pc, #32]	@ (8000608 <main+0x5c>)
 80005e8:	f002 ff6a 	bl	80034c0 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (blink_flag)
 80005ec:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <main+0x68>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0fa      	beq.n	80005ec <main+0x40>
	    {
	        blink_flag = 0;
 80005f6:	4b07      	ldr	r3, [pc, #28]	@ (8000614 <main+0x68>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
	        blinkMorseCode(morse_buffer);
 80005fc:	4806      	ldr	r0, [pc, #24]	@ (8000618 <main+0x6c>)
 80005fe:	f000 f989 	bl	8000914 <blinkMorseCode>
	  if (blink_flag)
 8000602:	e7f3      	b.n	80005ec <main+0x40>
 8000604:	2000022c 	.word	0x2000022c
 8000608:	2000015c 	.word	0x2000015c
 800060c:	200001e4 	.word	0x200001e4
 8000610:	2000026c 	.word	0x2000026c
 8000614:	2000026d 	.word	0x2000026d
 8000618:	20000270 	.word	0x20000270

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b096      	sub	sp, #88	@ 0x58
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	2244      	movs	r2, #68	@ 0x44
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f004 fca6 	bl	8004f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	463b      	mov	r3, r7
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000642:	f001 fb53 	bl	8001cec <HAL_PWREx_ControlVoltageScaling>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800064c:	f000 fa5c 	bl	8000b08 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000650:	2310      	movs	r3, #16
 8000652:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800065c:	2360      	movs	r3, #96	@ 0x60
 800065e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000660:	2302      	movs	r3, #2
 8000662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000664:	2301      	movs	r3, #1
 8000666:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000668:	2301      	movs	r3, #1
 800066a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800066c:	2328      	movs	r3, #40	@ 0x28
 800066e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000670:	2307      	movs	r3, #7
 8000672:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4618      	mov	r0, r3
 8000682:	f001 fb89 	bl	8001d98 <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800068c:	f000 fa3c 	bl	8000b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000694:	2303      	movs	r3, #3
 8000696:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	2104      	movs	r1, #4
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 ff51 	bl	8002550 <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006b4:	f000 fa28 	bl	8000b08 <Error_Handler>
  }
}
 80006b8:	bf00      	nop
 80006ba:	3758      	adds	r7, #88	@ 0x58
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000738 <MX_I2C1_Init+0x78>)
 80006c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80006ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006cc:	4a1b      	ldr	r2, [pc, #108]	@ (800073c <MX_I2C1_Init+0x7c>)
 80006ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006d0:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d6:	4b17      	ldr	r3, [pc, #92]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006d8:	2201      	movs	r2, #1
 80006da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006dc:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006e2:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e8:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ee:	4b11      	ldr	r3, [pc, #68]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006fa:	480e      	ldr	r0, [pc, #56]	@ (8000734 <MX_I2C1_Init+0x74>)
 80006fc:	f001 f9b6 	bl	8001a6c <HAL_I2C_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000706:	f000 f9ff 	bl	8000b08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800070a:	2100      	movs	r1, #0
 800070c:	4809      	ldr	r0, [pc, #36]	@ (8000734 <MX_I2C1_Init+0x74>)
 800070e:	f001 fa48 	bl	8001ba2 <HAL_I2CEx_ConfigAnalogFilter>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000718:	f000 f9f6 	bl	8000b08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800071c:	2100      	movs	r1, #0
 800071e:	4805      	ldr	r0, [pc, #20]	@ (8000734 <MX_I2C1_Init+0x74>)
 8000720:	f001 fa8a 	bl	8001c38 <HAL_I2CEx_ConfigDigitalFilter>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800072a:	f000 f9ed 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000108 	.word	0x20000108
 8000738:	40005400 	.word	0x40005400
 800073c:	10d19ce4 	.word	0x10d19ce4

08000740 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000744:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_UART4_Init+0x58>)
 8000746:	4a15      	ldr	r2, [pc, #84]	@ (800079c <MX_UART4_Init+0x5c>)
 8000748:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <MX_UART4_Init+0x58>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_UART4_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_UART4_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_UART4_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_UART4_Init+0x58>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <MX_UART4_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_UART4_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000776:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <MX_UART4_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_UART4_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_UART4_Init+0x58>)
 8000784:	f002 fdc4 	bl	8003310 <HAL_UART_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800078e:	f000 f9bb 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	2000015c 	.word	0x2000015c
 800079c:	40004c00 	.word	0x40004c00

080007a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007a6:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <MX_DMA_Init+0x38>)
 80007a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007aa:	4a0b      	ldr	r2, [pc, #44]	@ (80007d8 <MX_DMA_Init+0x38>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80007b2:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <MX_DMA_Init+0x38>)
 80007b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	203c      	movs	r0, #60	@ 0x3c
 80007c4:	f000 fce3 	bl	800118e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80007c8:	203c      	movs	r0, #60	@ 0x3c
 80007ca:	f000 fcfc 	bl	80011c6 <HAL_NVIC_EnableIRQ>

}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <MX_GPIO_Init+0x78>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	4a17      	ldr	r2, [pc, #92]	@ (8000854 <MX_GPIO_Init+0x78>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <MX_GPIO_Init+0x78>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	4b12      	ldr	r3, [pc, #72]	@ (8000854 <MX_GPIO_Init+0x78>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	4a11      	ldr	r2, [pc, #68]	@ (8000854 <MX_GPIO_Init+0x78>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000816:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <MX_GPIO_Init+0x78>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2120      	movs	r1, #32
 8000826:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800082a:	f001 f907 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800082e:	2320      	movs	r3, #32
 8000830:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	4619      	mov	r1, r3
 8000844:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000848:	f000 ff4e 	bl	80016e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800084c:	bf00      	nop
 800084e:	3720      	adds	r7, #32
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40021000 	.word	0x40021000

08000858 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b0c2      	sub	sp, #264	@ 0x108
 800085c:	af00      	add	r7, sp, #0
 800085e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000862:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000866:	6018      	str	r0, [r3, #0]
 8000868:	460a      	mov	r2, r1
 800086a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800086e:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 8000872:	801a      	strh	r2, [r3, #0]
    if (huart->Instance == UART4)
 8000874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000878:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a1f      	ldr	r2, [pc, #124]	@ (8000900 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d136      	bne.n	80008f4 <HAL_UARTEx_RxEventCallback+0x9c>
    {
        rx_buffer[Size] = '\0';  // null terminate
 8000886:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800088a:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	4a1c      	ldr	r2, [pc, #112]	@ (8000904 <HAL_UARTEx_RxEventCallback+0xac>)
 8000892:	2100      	movs	r1, #0
 8000894:	54d1      	strb	r1, [r2, r3]
        char morse_output[256];
        textToMorse((char*)rx_buffer, morse_output, sizeof(morse_output));
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800089e:	4619      	mov	r1, r3
 80008a0:	4818      	ldr	r0, [pc, #96]	@ (8000904 <HAL_UARTEx_RxEventCallback+0xac>)
 80008a2:	f000 f8b5 	bl	8000a10 <textToMorse>

        // Transmit Morse code string over UART
        HAL_UART_Transmit(&huart4, (uint8_t*)morse_output, strlen(morse_output), HAL_MAX_DELAY);
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fc90 	bl	80001d0 <strlen>
 80008b0:	4603      	mov	r3, r0
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	f107 0108 	add.w	r1, r7, #8
 80008b8:	f04f 33ff 	mov.w	r3, #4294967295
 80008bc:	4812      	ldr	r0, [pc, #72]	@ (8000908 <HAL_UARTEx_RxEventCallback+0xb0>)
 80008be:	f002 fd75 	bl	80033ac <HAL_UART_Transmit>

        // Blink LED
        blink_flag = 1;  // Set flag to trigger blink in main loop
 80008c2:	4b12      	ldr	r3, [pc, #72]	@ (800090c <HAL_UARTEx_RxEventCallback+0xb4>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	701a      	strb	r2, [r3, #0]
        strncpy(morse_buffer, morse_output, sizeof(morse_buffer));
 80008c8:	f107 0308 	add.w	r3, r7, #8
 80008cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008d0:	4619      	mov	r1, r3
 80008d2:	480f      	ldr	r0, [pc, #60]	@ (8000910 <HAL_UARTEx_RxEventCallback+0xb8>)
 80008d4:	f004 fb69 	bl	8004faa <strncpy>
        morse_buffer[sizeof(morse_buffer) - 1] = '\0';  // Ensure null-termination
 80008d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000910 <HAL_UARTEx_RxEventCallback+0xb8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff


        // Clear buffer after processing
        memset(rx_buffer, 0, sizeof(rx_buffer)); // Clear the buffer after processing
 80008e0:	2240      	movs	r2, #64	@ 0x40
 80008e2:	2100      	movs	r1, #0
 80008e4:	4807      	ldr	r0, [pc, #28]	@ (8000904 <HAL_UARTEx_RxEventCallback+0xac>)
 80008e6:	f004 fb49 	bl	8004f7c <memset>


        // Restart reception
        HAL_UARTEx_ReceiveToIdle_DMA(&huart4, rx_buffer, sizeof(rx_buffer));
 80008ea:	2240      	movs	r2, #64	@ 0x40
 80008ec:	4905      	ldr	r1, [pc, #20]	@ (8000904 <HAL_UARTEx_RxEventCallback+0xac>)
 80008ee:	4806      	ldr	r0, [pc, #24]	@ (8000908 <HAL_UARTEx_RxEventCallback+0xb0>)
 80008f0:	f004 faba 	bl	8004e68 <HAL_UARTEx_ReceiveToIdle_DMA>
    }


}
 80008f4:	bf00      	nop
 80008f6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40004c00 	.word	0x40004c00
 8000904:	2000022c 	.word	0x2000022c
 8000908:	2000015c 	.word	0x2000015c
 800090c:	2000026d 	.word	0x2000026d
 8000910:	20000270 	.word	0x20000270

08000914 <blinkMorseCode>:
void blinkMorseCode(char* code)
{char msg[50]; // Add this line before the loop
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b091      	sub	sp, #68	@ 0x44
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]

    for (uint16_t i = 0; i < strlen(code); i++)
 800091c:	2300      	movs	r3, #0
 800091e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8000920:	e066      	b.n	80009f0 <blinkMorseCode+0xdc>
    {
        snprintf(msg, sizeof(msg), "Blinking: %c\r\n", code[i]);
 8000922:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	4413      	add	r3, r2
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	f107 000c 	add.w	r0, r7, #12
 800092e:	4a36      	ldr	r2, [pc, #216]	@ (8000a08 <blinkMorseCode+0xf4>)
 8000930:	2132      	movs	r1, #50	@ 0x32
 8000932:	f004 faed 	bl	8004f10 <sniprintf>
        HAL_UART_Transmit(&huart4, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fc48 	bl	80001d0 <strlen>
 8000940:	4603      	mov	r3, r0
 8000942:	b29a      	uxth	r2, r3
 8000944:	f107 010c 	add.w	r1, r7, #12
 8000948:	f04f 33ff 	mov.w	r3, #4294967295
 800094c:	482f      	ldr	r0, [pc, #188]	@ (8000a0c <blinkMorseCode+0xf8>)
 800094e:	f002 fd2d 	bl	80033ac <HAL_UART_Transmit>

        if (code[i] == '.')
 8000952:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b2e      	cmp	r3, #46	@ 0x2e
 800095c:	d112      	bne.n	8000984 <blinkMorseCode+0x70>
        {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800095e:	2201      	movs	r2, #1
 8000960:	2120      	movs	r1, #32
 8000962:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000966:	f001 f869 	bl	8001a3c <HAL_GPIO_WritePin>
            HAL_Delay(200);  // short blink
 800096a:	20c8      	movs	r0, #200	@ 0xc8
 800096c:	f000 fb10 	bl	8000f90 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	2120      	movs	r1, #32
 8000974:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000978:	f001 f860 	bl	8001a3c <HAL_GPIO_WritePin>
            HAL_Delay(200); // gap between elements
 800097c:	20c8      	movs	r0, #200	@ 0xc8
 800097e:	f000 fb07 	bl	8000f90 <HAL_Delay>
 8000982:	e02f      	b.n	80009e4 <blinkMorseCode+0xd0>
        }
        else if (code[i] == '-')
 8000984:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b2d      	cmp	r3, #45	@ 0x2d
 800098e:	d114      	bne.n	80009ba <blinkMorseCode+0xa6>
        {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000990:	2201      	movs	r2, #1
 8000992:	2120      	movs	r1, #32
 8000994:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000998:	f001 f850 	bl	8001a3c <HAL_GPIO_WritePin>
            HAL_Delay(600);  // long blink
 800099c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80009a0:	f000 faf6 	bl	8000f90 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2120      	movs	r1, #32
 80009a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ac:	f001 f846 	bl	8001a3c <HAL_GPIO_WritePin>
            HAL_Delay(600); // gap between elements
 80009b0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80009b4:	f000 faec 	bl	8000f90 <HAL_Delay>
 80009b8:	e014      	b.n	80009e4 <blinkMorseCode+0xd0>
        }
        else if (code[i] == '/')
 80009ba:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	4413      	add	r3, r2
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80009c4:	d104      	bne.n	80009d0 <blinkMorseCode+0xbc>
        {
            HAL_Delay(1400); // inter-word delay
 80009c6:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 80009ca:	f000 fae1 	bl	8000f90 <HAL_Delay>
 80009ce:	e009      	b.n	80009e4 <blinkMorseCode+0xd0>
        }

        else if (code[i] == ' ')
 80009d0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b20      	cmp	r3, #32
 80009da:	d103      	bne.n	80009e4 <blinkMorseCode+0xd0>
        {
            HAL_Delay(1000);  // inter-letter delay
 80009dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009e0:	f000 fad6 	bl	8000f90 <HAL_Delay>
        }
        HAL_Delay(200);  // small gap between dots/dashes
 80009e4:	20c8      	movs	r0, #200	@ 0xc8
 80009e6:	f000 fad3 	bl	8000f90 <HAL_Delay>
    for (uint16_t i = 0; i < strlen(code); i++)
 80009ea:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80009ec:	3301      	adds	r3, #1
 80009ee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80009f0:	8ffc      	ldrh	r4, [r7, #62]	@ 0x3e
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff fbec 	bl	80001d0 <strlen>
 80009f8:	4603      	mov	r3, r0
 80009fa:	429c      	cmp	r4, r3
 80009fc:	d391      	bcc.n	8000922 <blinkMorseCode+0xe>
    }
}
 80009fe:	bf00      	nop
 8000a00:	bf00      	nop
 8000a02:	3744      	adds	r7, #68	@ 0x44
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd90      	pop	{r4, r7, pc}
 8000a08:	080059bc 	.word	0x080059bc
 8000a0c:	2000015c 	.word	0x2000015c

08000a10 <textToMorse>:

void textToMorse(const char* input, char* output, size_t maxLen)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
    output[0] = '\0';  // Clear output buffer
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]

    for (size_t i = 0; i < strlen(input); i++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	e05c      	b.n	8000ae2 <textToMorse+0xd2>
    {
        char c = input[i];
 8000a28:	68fa      	ldr	r2, [r7, #12]
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	74fb      	strb	r3, [r7, #19]
        if (c >= 'a' && c <= 'z') {
 8000a32:	7cfb      	ldrb	r3, [r7, #19]
 8000a34:	2b60      	cmp	r3, #96	@ 0x60
 8000a36:	d90c      	bls.n	8000a52 <textToMorse+0x42>
 8000a38:	7cfb      	ldrb	r3, [r7, #19]
 8000a3a:	2b7a      	cmp	r3, #122	@ 0x7a
 8000a3c:	d809      	bhi.n	8000a52 <textToMorse+0x42>
            strcat(output, morse_table[c - 'a']);
 8000a3e:	7cfb      	ldrb	r3, [r7, #19]
 8000a40:	3b61      	subs	r3, #97	@ 0x61
 8000a42:	4a2e      	ldr	r2, [pc, #184]	@ (8000afc <textToMorse+0xec>)
 8000a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	68b8      	ldr	r0, [r7, #8]
 8000a4c:	f004 fa9e 	bl	8004f8c <strcat>
 8000a50:	e02e      	b.n	8000ab0 <textToMorse+0xa0>
        }
        else if (c >= 'A' && c <= 'Z') {
 8000a52:	7cfb      	ldrb	r3, [r7, #19]
 8000a54:	2b40      	cmp	r3, #64	@ 0x40
 8000a56:	d90c      	bls.n	8000a72 <textToMorse+0x62>
 8000a58:	7cfb      	ldrb	r3, [r7, #19]
 8000a5a:	2b5a      	cmp	r3, #90	@ 0x5a
 8000a5c:	d809      	bhi.n	8000a72 <textToMorse+0x62>
            strcat(output, morse_table[c - 'A']);
 8000a5e:	7cfb      	ldrb	r3, [r7, #19]
 8000a60:	3b41      	subs	r3, #65	@ 0x41
 8000a62:	4a26      	ldr	r2, [pc, #152]	@ (8000afc <textToMorse+0xec>)
 8000a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	68b8      	ldr	r0, [r7, #8]
 8000a6c:	f004 fa8e 	bl	8004f8c <strcat>
 8000a70:	e01e      	b.n	8000ab0 <textToMorse+0xa0>
        }
        else if (c >= '0' && c <= '9') {
 8000a72:	7cfb      	ldrb	r3, [r7, #19]
 8000a74:	2b2f      	cmp	r3, #47	@ 0x2f
 8000a76:	d90c      	bls.n	8000a92 <textToMorse+0x82>
 8000a78:	7cfb      	ldrb	r3, [r7, #19]
 8000a7a:	2b39      	cmp	r3, #57	@ 0x39
 8000a7c:	d809      	bhi.n	8000a92 <textToMorse+0x82>
            strcat(output, morse_table[c - '0' + 26]);
 8000a7e:	7cfb      	ldrb	r3, [r7, #19]
 8000a80:	3b16      	subs	r3, #22
 8000a82:	4a1e      	ldr	r2, [pc, #120]	@ (8000afc <textToMorse+0xec>)
 8000a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	68b8      	ldr	r0, [r7, #8]
 8000a8c:	f004 fa7e 	bl	8004f8c <strcat>
 8000a90:	e00e      	b.n	8000ab0 <textToMorse+0xa0>
        }
        else if (c == ' ') {
 8000a92:	7cfb      	ldrb	r3, [r7, #19]
 8000a94:	2b20      	cmp	r3, #32
 8000a96:	d120      	bne.n	8000ada <textToMorse+0xca>
            strcat(output, "/");  // separator for words
 8000a98:	68b8      	ldr	r0, [r7, #8]
 8000a9a:	f7ff fb99 	bl	80001d0 <strlen>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4916      	ldr	r1, [pc, #88]	@ (8000b00 <textToMorse+0xf0>)
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	460b      	mov	r3, r1
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	8013      	strh	r3, [r2, #0]
        }
        else {
            continue; // skip unsupported characters
        }
        strcat(output, " "); // separator between letters
 8000ab0:	68b8      	ldr	r0, [r7, #8]
 8000ab2:	f7ff fb8d 	bl	80001d0 <strlen>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	461a      	mov	r2, r3
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	4413      	add	r3, r2
 8000abe:	4911      	ldr	r1, [pc, #68]	@ (8000b04 <textToMorse+0xf4>)
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	8013      	strh	r3, [r2, #0]
        if (strlen(output) > maxLen - 6) break; // prevent overflow
 8000ac8:	68b8      	ldr	r0, [r7, #8]
 8000aca:	f7ff fb81 	bl	80001d0 <strlen>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b06      	subs	r3, #6
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d80c      	bhi.n	8000af2 <textToMorse+0xe2>
 8000ad8:	e000      	b.n	8000adc <textToMorse+0xcc>
            continue; // skip unsupported characters
 8000ada:	bf00      	nop
    for (size_t i = 0; i < strlen(input); i++)
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	68f8      	ldr	r0, [r7, #12]
 8000ae4:	f7ff fb74 	bl	80001d0 <strlen>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d39b      	bcc.n	8000a28 <textToMorse+0x18>
    }
}
 8000af0:	e000      	b.n	8000af4 <textToMorse+0xe4>
        if (strlen(output) > maxLen - 6) break; // prevent overflow
 8000af2:	bf00      	nop
}
 8000af4:	bf00      	nop
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000000 	.word	0x20000000
 8000b00:	080059cc 	.word	0x080059cc
 8000b04:	080059d0 	.word	0x080059d0

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <Error_Handler+0x8>

08000b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <HAL_MspInit+0x44>)
 8000b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b58 <HAL_MspInit+0x44>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b26:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <HAL_MspInit+0x44>)
 8000b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b32:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <HAL_MspInit+0x44>)
 8000b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b36:	4a08      	ldr	r2, [pc, #32]	@ (8000b58 <HAL_MspInit+0x44>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_MspInit+0x44>)
 8000b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40021000 	.word	0x40021000

08000b5c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b0ac      	sub	sp, #176	@ 0xb0
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2288      	movs	r2, #136	@ 0x88
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f004 f9fd 	bl	8004f7c <memset>
  if(hi2c->Instance==I2C1)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a21      	ldr	r2, [pc, #132]	@ (8000c0c <HAL_I2C_MspInit+0xb0>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d13a      	bne.n	8000c02 <HAL_I2C_MspInit+0xa6>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b8c:	2340      	movs	r3, #64	@ 0x40
 8000b8e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f001 fefd 	bl	8002998 <HAL_RCCEx_PeriphCLKConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ba4:	f7ff ffb0 	bl	8000b08 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba8:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <HAL_I2C_MspInit+0xb4>)
 8000baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bac:	4a18      	ldr	r2, [pc, #96]	@ (8000c10 <HAL_I2C_MspInit+0xb4>)
 8000bae:	f043 0302 	orr.w	r3, r3, #2
 8000bb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bb4:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <HAL_I2C_MspInit+0xb4>)
 8000bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb8:	f003 0302 	and.w	r3, r3, #2
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bc0:	23c0      	movs	r3, #192	@ 0xc0
 8000bc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bc6:	2312      	movs	r3, #18
 8000bc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bde:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000be2:	4619      	mov	r1, r3
 8000be4:	480b      	ldr	r0, [pc, #44]	@ (8000c14 <HAL_I2C_MspInit+0xb8>)
 8000be6:	f000 fd7f 	bl	80016e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bea:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <HAL_I2C_MspInit+0xb4>)
 8000bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bee:	4a08      	ldr	r2, [pc, #32]	@ (8000c10 <HAL_I2C_MspInit+0xb4>)
 8000bf0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_I2C_MspInit+0xb4>)
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c02:	bf00      	nop
 8000c04:	37b0      	adds	r7, #176	@ 0xb0
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40005400 	.word	0x40005400
 8000c10:	40021000 	.word	0x40021000
 8000c14:	48000400 	.word	0x48000400

08000c18 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b0ac      	sub	sp, #176	@ 0xb0
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2288      	movs	r2, #136	@ 0x88
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f004 f99f 	bl	8004f7c <memset>
  if(huart->Instance==UART4)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a3a      	ldr	r2, [pc, #232]	@ (8000d2c <HAL_UART_MspInit+0x114>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d16c      	bne.n	8000d22 <HAL_UART_MspInit+0x10a>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000c48:	2308      	movs	r3, #8
 8000c4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4618      	mov	r0, r3
 8000c56:	f001 fe9f 	bl	8002998 <HAL_RCCEx_PeriphCLKConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c60:	f7ff ff52 	bl	8000b08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c64:	4b32      	ldr	r3, [pc, #200]	@ (8000d30 <HAL_UART_MspInit+0x118>)
 8000c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c68:	4a31      	ldr	r2, [pc, #196]	@ (8000d30 <HAL_UART_MspInit+0x118>)
 8000c6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000c6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c70:	4b2f      	ldr	r3, [pc, #188]	@ (8000d30 <HAL_UART_MspInit+0x118>)
 8000c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d30 <HAL_UART_MspInit+0x118>)
 8000c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c80:	4a2b      	ldr	r2, [pc, #172]	@ (8000d30 <HAL_UART_MspInit+0x118>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c88:	4b29      	ldr	r3, [pc, #164]	@ (8000d30 <HAL_UART_MspInit+0x118>)
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c94:	2303      	movs	r3, #3
 8000c96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000cac:	2308      	movs	r3, #8
 8000cae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cbc:	f000 fd14 	bl	80016e8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d34 <HAL_UART_MspInit+0x11c>)
 8000cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8000d38 <HAL_UART_MspInit+0x120>)
 8000cc4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <HAL_UART_MspInit+0x11c>)
 8000cc8:	2202      	movs	r2, #2
 8000cca:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ccc:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <HAL_UART_MspInit+0x11c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd2:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <HAL_UART_MspInit+0x11c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	@ (8000d34 <HAL_UART_MspInit+0x11c>)
 8000cda:	2280      	movs	r2, #128	@ 0x80
 8000cdc:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <HAL_UART_MspInit+0x11c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ce4:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <HAL_UART_MspInit+0x11c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8000cea:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <HAL_UART_MspInit+0x11c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cf0:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <HAL_UART_MspInit+0x11c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000cf6:	480f      	ldr	r0, [pc, #60]	@ (8000d34 <HAL_UART_MspInit+0x11c>)
 8000cf8:	f000 fa80 	bl	80011fc <HAL_DMA_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8000d02:	f7ff ff01 	bl	8000b08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <HAL_UART_MspInit+0x11c>)
 8000d0a:	675a      	str	r2, [r3, #116]	@ 0x74
 8000d0c:	4a09      	ldr	r2, [pc, #36]	@ (8000d34 <HAL_UART_MspInit+0x11c>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6293      	str	r3, [r2, #40]	@ 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	2034      	movs	r0, #52	@ 0x34
 8000d18:	f000 fa39 	bl	800118e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000d1c:	2034      	movs	r0, #52	@ 0x34
 8000d1e:	f000 fa52 	bl	80011c6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8000d22:	bf00      	nop
 8000d24:	37b0      	adds	r7, #176	@ 0xb0
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40004c00 	.word	0x40004c00
 8000d30:	40021000 	.word	0x40021000
 8000d34:	200001e4 	.word	0x200001e4
 8000d38:	40020458 	.word	0x40020458

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <NMI_Handler+0x4>

08000d44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <MemManage_Handler+0x4>

08000d54 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d92:	f000 f8dd 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000da0:	4802      	ldr	r0, [pc, #8]	@ (8000dac <UART4_IRQHandler+0x10>)
 8000da2:	f002 fbd9 	bl	8003558 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000015c 	.word	0x2000015c

08000db0 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000db4:	4802      	ldr	r0, [pc, #8]	@ (8000dc0 <DMA2_Channel5_IRQHandler+0x10>)
 8000db6:	f000 fbb8 	bl	800152a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200001e4 	.word	0x200001e4

08000dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dcc:	4a14      	ldr	r2, [pc, #80]	@ (8000e20 <_sbrk+0x5c>)
 8000dce:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <_sbrk+0x60>)
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd8:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <_sbrk+0x64>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	@ (8000e2c <_sbrk+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d207      	bcs.n	8000e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df4:	f004 f8ec 	bl	8004fd0 <__errno>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	e009      	b.n	8000e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e04:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	4a05      	ldr	r2, [pc, #20]	@ (8000e28 <_sbrk+0x64>)
 8000e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20018000 	.word	0x20018000
 8000e24:	00000400 	.word	0x00000400
 8000e28:	20000370 	.word	0x20000370
 8000e2c:	200004c0 	.word	0x200004c0

08000e30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e58:	f7ff ffea 	bl	8000e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e5c:	480c      	ldr	r0, [pc, #48]	@ (8000e90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e5e:	490d      	ldr	r1, [pc, #52]	@ (8000e94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e60:	4a0d      	ldr	r2, [pc, #52]	@ (8000e98 <LoopForever+0xe>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea0 <LoopForever+0x16>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e82:	f004 f8ab 	bl	8004fdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e86:	f7ff fb91 	bl	80005ac <main>

08000e8a <LoopForever>:

LoopForever:
    b LoopForever
 8000e8a:	e7fe      	b.n	8000e8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8000e98:	08005a78 	.word	0x08005a78
  ldr r2, =_sbss
 8000e9c:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8000ea0:	200004c0 	.word	0x200004c0

08000ea4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC1_2_IRQHandler>

08000ea6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f000 f961 	bl	8001178 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f000 f80e 	bl	8000ed8 <HAL_InitTick>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d002      	beq.n	8000ec8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	71fb      	strb	r3, [r7, #7]
 8000ec6:	e001      	b.n	8000ecc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ec8:	f7ff fe24 	bl	8000b14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ee4:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <HAL_InitTick+0x6c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d023      	beq.n	8000f34 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000eec:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <HAL_InitTick+0x70>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <HAL_InitTick+0x6c>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f96d 	bl	80011e2 <HAL_SYSTICK_Config>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d10f      	bne.n	8000f2e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	d809      	bhi.n	8000f28 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f14:	2200      	movs	r2, #0
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f000 f937 	bl	800118e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f20:	4a0a      	ldr	r2, [pc, #40]	@ (8000f4c <HAL_InitTick+0x74>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	e007      	b.n	8000f38 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
 8000f2c:	e004      	b.n	8000f38 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	73fb      	strb	r3, [r7, #15]
 8000f32:	e001      	b.n	8000f38 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000098 	.word	0x20000098
 8000f48:	20000090 	.word	0x20000090
 8000f4c:	20000094 	.word	0x20000094

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	@ (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000098 	.word	0x20000098
 8000f74:	20000374 	.word	0x20000374

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	@ (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000374 	.word	0x20000374

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff ffee 	bl	8000f78 <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa8:	d005      	beq.n	8000fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000faa:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <HAL_Delay+0x44>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fb6:	bf00      	nop
 8000fb8:	f7ff ffde 	bl	8000f78 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d8f7      	bhi.n	8000fb8 <HAL_Delay+0x28>
  {
  }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000098 	.word	0x20000098

08000fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	@ (800101c <__NVIC_SetPriorityGrouping+0x44>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4907      	ldr	r1, [pc, #28]	@ (8001074 <__NVIC_EnableIRQ+0x38>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	490c      	ldr	r1, [pc, #48]	@ (80010c4 <__NVIC_SetPriority+0x4c>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	440b      	add	r3, r1
 800109c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a0:	e00a      	b.n	80010b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4908      	ldr	r1, [pc, #32]	@ (80010c8 <__NVIC_SetPriority+0x50>)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	3b04      	subs	r3, #4
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	440b      	add	r3, r1
 80010b6:	761a      	strb	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000e100 	.word	0xe000e100
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	@ 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f1c3 0307 	rsb	r3, r3, #7
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	bf28      	it	cs
 80010ea:	2304      	movcs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3304      	adds	r3, #4
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d902      	bls.n	80010fc <NVIC_EncodePriority+0x30>
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3b03      	subs	r3, #3
 80010fa:	e000      	b.n	80010fe <NVIC_EncodePriority+0x32>
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	401a      	ands	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001114:	f04f 31ff 	mov.w	r1, #4294967295
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43d9      	mvns	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	4313      	orrs	r3, r2
         );
}
 8001126:	4618      	mov	r0, r3
 8001128:	3724      	adds	r7, #36	@ 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001144:	d301      	bcc.n	800114a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001146:	2301      	movs	r3, #1
 8001148:	e00f      	b.n	800116a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114a:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <SysTick_Config+0x40>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001152:	210f      	movs	r1, #15
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f7ff ff8e 	bl	8001078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800115c:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <SysTick_Config+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001162:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <SysTick_Config+0x40>)
 8001164:	2207      	movs	r2, #7
 8001166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	e000e010 	.word	0xe000e010

08001178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff29 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011a0:	f7ff ff3e 	bl	8001020 <__NVIC_GetPriorityGrouping>
 80011a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	68b9      	ldr	r1, [r7, #8]
 80011aa:	6978      	ldr	r0, [r7, #20]
 80011ac:	f7ff ff8e 	bl	80010cc <NVIC_EncodePriority>
 80011b0:	4602      	mov	r2, r0
 80011b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff5d 	bl	8001078 <__NVIC_SetPriority>
}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff31 	bl	800103c <__NVIC_EnableIRQ>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ffa2 	bl	8001134 <SysTick_Config>
 80011f0:	4603      	mov	r3, r0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e098      	b.n	8001340 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	4b4d      	ldr	r3, [pc, #308]	@ (800134c <HAL_DMA_Init+0x150>)
 8001216:	429a      	cmp	r2, r3
 8001218:	d80f      	bhi.n	800123a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	4b4b      	ldr	r3, [pc, #300]	@ (8001350 <HAL_DMA_Init+0x154>)
 8001222:	4413      	add	r3, r2
 8001224:	4a4b      	ldr	r2, [pc, #300]	@ (8001354 <HAL_DMA_Init+0x158>)
 8001226:	fba2 2303 	umull	r2, r3, r2, r3
 800122a:	091b      	lsrs	r3, r3, #4
 800122c:	009a      	lsls	r2, r3, #2
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a48      	ldr	r2, [pc, #288]	@ (8001358 <HAL_DMA_Init+0x15c>)
 8001236:	641a      	str	r2, [r3, #64]	@ 0x40
 8001238:	e00e      	b.n	8001258 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	4b46      	ldr	r3, [pc, #280]	@ (800135c <HAL_DMA_Init+0x160>)
 8001242:	4413      	add	r3, r2
 8001244:	4a43      	ldr	r2, [pc, #268]	@ (8001354 <HAL_DMA_Init+0x158>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	091b      	lsrs	r3, r3, #4
 800124c:	009a      	lsls	r2, r3, #2
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a42      	ldr	r2, [pc, #264]	@ (8001360 <HAL_DMA_Init+0x164>)
 8001256:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2202      	movs	r2, #2
 800125c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800126e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001272:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800127c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001288:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001294:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80012b2:	d039      	beq.n	8001328 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b8:	4a27      	ldr	r2, [pc, #156]	@ (8001358 <HAL_DMA_Init+0x15c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d11a      	bne.n	80012f4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80012be:	4b29      	ldr	r3, [pc, #164]	@ (8001364 <HAL_DMA_Init+0x168>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c6:	f003 031c 	and.w	r3, r3, #28
 80012ca:	210f      	movs	r1, #15
 80012cc:	fa01 f303 	lsl.w	r3, r1, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	4924      	ldr	r1, [pc, #144]	@ (8001364 <HAL_DMA_Init+0x168>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80012d8:	4b22      	ldr	r3, [pc, #136]	@ (8001364 <HAL_DMA_Init+0x168>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6859      	ldr	r1, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e4:	f003 031c 	and.w	r3, r3, #28
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	491d      	ldr	r1, [pc, #116]	@ (8001364 <HAL_DMA_Init+0x168>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	600b      	str	r3, [r1, #0]
 80012f2:	e019      	b.n	8001328 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80012f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001368 <HAL_DMA_Init+0x16c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fc:	f003 031c 	and.w	r3, r3, #28
 8001300:	210f      	movs	r1, #15
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	4917      	ldr	r1, [pc, #92]	@ (8001368 <HAL_DMA_Init+0x16c>)
 800130a:	4013      	ands	r3, r2
 800130c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800130e:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <HAL_DMA_Init+0x16c>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6859      	ldr	r1, [r3, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131a:	f003 031c 	and.w	r3, r3, #28
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	4911      	ldr	r1, [pc, #68]	@ (8001368 <HAL_DMA_Init+0x16c>)
 8001324:	4313      	orrs	r3, r2
 8001326:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	40020407 	.word	0x40020407
 8001350:	bffdfff8 	.word	0xbffdfff8
 8001354:	cccccccd 	.word	0xcccccccd
 8001358:	40020000 	.word	0x40020000
 800135c:	bffdfbf8 	.word	0xbffdfbf8
 8001360:	40020400 	.word	0x40020400
 8001364:	400200a8 	.word	0x400200a8
 8001368:	400204a8 	.word	0x400204a8

0800136c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
 8001378:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001384:	2b01      	cmp	r3, #1
 8001386:	d101      	bne.n	800138c <HAL_DMA_Start_IT+0x20>
 8001388:	2302      	movs	r3, #2
 800138a:	e04b      	b.n	8001424 <HAL_DMA_Start_IT+0xb8>
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b01      	cmp	r3, #1
 800139e:	d13a      	bne.n	8001416 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2202      	movs	r2, #2
 80013a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2200      	movs	r2, #0
 80013ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 0201 	bic.w	r2, r2, #1
 80013bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	68b9      	ldr	r1, [r7, #8]
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f000 f95f 	bl	8001688 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d008      	beq.n	80013e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f042 020e 	orr.w	r2, r2, #14
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	e00f      	b.n	8001404 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 0204 	bic.w	r2, r2, #4
 80013f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 020a 	orr.w	r2, r2, #10
 8001402:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0201 	orr.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e005      	b.n	8001422 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800141e:	2302      	movs	r3, #2
 8001420:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001422:	7dfb      	ldrb	r3, [r7, #23]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d008      	beq.n	8001456 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2204      	movs	r2, #4
 8001448:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e022      	b.n	800149c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 020e 	bic.w	r2, r2, #14
 8001464:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0201 	bic.w	r2, r2, #1
 8001474:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	f003 021c 	and.w	r2, r3, #28
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001482:	2101      	movs	r1, #1
 8001484:	fa01 f202 	lsl.w	r2, r1, r2
 8001488:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800149a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800149c:	4618      	mov	r0, r3
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d005      	beq.n	80014cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2204      	movs	r2, #4
 80014c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	73fb      	strb	r3, [r7, #15]
 80014ca:	e029      	b.n	8001520 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 020e 	bic.w	r2, r2, #14
 80014da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 0201 	bic.w	r2, r2, #1
 80014ea:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f0:	f003 021c 	and.w	r2, r3, #28
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f8:	2101      	movs	r1, #1
 80014fa:	fa01 f202 	lsl.w	r2, r1, r2
 80014fe:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	4798      	blx	r3
    }
  }
  return status;
 8001520:	7bfb      	ldrb	r3, [r7, #15]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001546:	f003 031c 	and.w	r3, r3, #28
 800154a:	2204      	movs	r2, #4
 800154c:	409a      	lsls	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4013      	ands	r3, r2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d026      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x7a>
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	d021      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0320 	and.w	r3, r3, #32
 800156a:	2b00      	cmp	r3, #0
 800156c:	d107      	bne.n	800157e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0204 	bic.w	r2, r2, #4
 800157c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	f003 021c 	and.w	r2, r3, #28
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	2104      	movs	r1, #4
 800158c:	fa01 f202 	lsl.w	r2, r1, r2
 8001590:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	2b00      	cmp	r3, #0
 8001598:	d071      	beq.n	800167e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80015a2:	e06c      	b.n	800167e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a8:	f003 031c 	and.w	r3, r3, #28
 80015ac:	2202      	movs	r2, #2
 80015ae:	409a      	lsls	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d02e      	beq.n	8001616 <HAL_DMA_IRQHandler+0xec>
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d029      	beq.n	8001616 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0320 	and.w	r3, r3, #32
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d10b      	bne.n	80015e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 020a 	bic.w	r2, r2, #10
 80015de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ec:	f003 021c 	and.w	r2, r3, #28
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f4:	2102      	movs	r1, #2
 80015f6:	fa01 f202 	lsl.w	r2, r1, r2
 80015fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001608:	2b00      	cmp	r3, #0
 800160a:	d038      	beq.n	800167e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001614:	e033      	b.n	800167e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161a:	f003 031c 	and.w	r3, r3, #28
 800161e:	2208      	movs	r2, #8
 8001620:	409a      	lsls	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4013      	ands	r3, r2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d02a      	beq.n	8001680 <HAL_DMA_IRQHandler+0x156>
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	2b00      	cmp	r3, #0
 8001632:	d025      	beq.n	8001680 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 020e 	bic.w	r2, r2, #14
 8001642:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001648:	f003 021c 	and.w	r2, r3, #28
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001650:	2101      	movs	r1, #1
 8001652:	fa01 f202 	lsl.w	r2, r1, r2
 8001656:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001672:	2b00      	cmp	r3, #0
 8001674:	d004      	beq.n	8001680 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800167e:	bf00      	nop
 8001680:	bf00      	nop
}
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169a:	f003 021c 	and.w	r2, r3, #28
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	2101      	movs	r1, #1
 80016a4:	fa01 f202 	lsl.w	r2, r1, r2
 80016a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b10      	cmp	r3, #16
 80016b8:	d108      	bne.n	80016cc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016ca:	e007      	b.n	80016dc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68ba      	ldr	r2, [r7, #8]
 80016d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	60da      	str	r2, [r3, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f6:	e17f      	b.n	80019f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2101      	movs	r1, #1
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa01 f303 	lsl.w	r3, r1, r3
 8001704:	4013      	ands	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 8171 	beq.w	80019f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b01      	cmp	r3, #1
 800171a:	d005      	beq.n	8001728 <HAL_GPIO_Init+0x40>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d130      	bne.n	800178a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	2203      	movs	r2, #3
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800175e:	2201      	movs	r2, #1
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	f003 0201 	and.w	r2, r3, #1
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b03      	cmp	r3, #3
 8001794:	d118      	bne.n	80017c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800179a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800179c:	2201      	movs	r2, #1
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	08db      	lsrs	r3, r3, #3
 80017b2:	f003 0201 	and.w	r2, r3, #1
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d017      	beq.n	8001804 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d123      	bne.n	8001858 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	08da      	lsrs	r2, r3, #3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3208      	adds	r2, #8
 8001818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800181c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	220f      	movs	r2, #15
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	08da      	lsrs	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3208      	adds	r2, #8
 8001852:	6939      	ldr	r1, [r7, #16]
 8001854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	2203      	movs	r2, #3
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0203 	and.w	r2, r3, #3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80ac 	beq.w	80019f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189a:	4b5f      	ldr	r3, [pc, #380]	@ (8001a18 <HAL_GPIO_Init+0x330>)
 800189c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800189e:	4a5e      	ldr	r2, [pc, #376]	@ (8001a18 <HAL_GPIO_Init+0x330>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80018a6:	4b5c      	ldr	r3, [pc, #368]	@ (8001a18 <HAL_GPIO_Init+0x330>)
 80018a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018b2:	4a5a      	ldr	r2, [pc, #360]	@ (8001a1c <HAL_GPIO_Init+0x334>)
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	3302      	adds	r3, #2
 80018ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	220f      	movs	r2, #15
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4013      	ands	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80018dc:	d025      	beq.n	800192a <HAL_GPIO_Init+0x242>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001a20 <HAL_GPIO_Init+0x338>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d01f      	beq.n	8001926 <HAL_GPIO_Init+0x23e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001a24 <HAL_GPIO_Init+0x33c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d019      	beq.n	8001922 <HAL_GPIO_Init+0x23a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001a28 <HAL_GPIO_Init+0x340>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d013      	beq.n	800191e <HAL_GPIO_Init+0x236>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4c      	ldr	r2, [pc, #304]	@ (8001a2c <HAL_GPIO_Init+0x344>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d00d      	beq.n	800191a <HAL_GPIO_Init+0x232>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4b      	ldr	r2, [pc, #300]	@ (8001a30 <HAL_GPIO_Init+0x348>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d007      	beq.n	8001916 <HAL_GPIO_Init+0x22e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4a      	ldr	r2, [pc, #296]	@ (8001a34 <HAL_GPIO_Init+0x34c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d101      	bne.n	8001912 <HAL_GPIO_Init+0x22a>
 800190e:	2306      	movs	r3, #6
 8001910:	e00c      	b.n	800192c <HAL_GPIO_Init+0x244>
 8001912:	2307      	movs	r3, #7
 8001914:	e00a      	b.n	800192c <HAL_GPIO_Init+0x244>
 8001916:	2305      	movs	r3, #5
 8001918:	e008      	b.n	800192c <HAL_GPIO_Init+0x244>
 800191a:	2304      	movs	r3, #4
 800191c:	e006      	b.n	800192c <HAL_GPIO_Init+0x244>
 800191e:	2303      	movs	r3, #3
 8001920:	e004      	b.n	800192c <HAL_GPIO_Init+0x244>
 8001922:	2302      	movs	r3, #2
 8001924:	e002      	b.n	800192c <HAL_GPIO_Init+0x244>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <HAL_GPIO_Init+0x244>
 800192a:	2300      	movs	r3, #0
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	f002 0203 	and.w	r2, r2, #3
 8001932:	0092      	lsls	r2, r2, #2
 8001934:	4093      	lsls	r3, r2
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800193c:	4937      	ldr	r1, [pc, #220]	@ (8001a1c <HAL_GPIO_Init+0x334>)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	089b      	lsrs	r3, r3, #2
 8001942:	3302      	adds	r3, #2
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800194a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a38 <HAL_GPIO_Init+0x350>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	43db      	mvns	r3, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800196e:	4a32      	ldr	r2, [pc, #200]	@ (8001a38 <HAL_GPIO_Init+0x350>)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001974:	4b30      	ldr	r3, [pc, #192]	@ (8001a38 <HAL_GPIO_Init+0x350>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001998:	4a27      	ldr	r2, [pc, #156]	@ (8001a38 <HAL_GPIO_Init+0x350>)
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800199e:	4b26      	ldr	r3, [pc, #152]	@ (8001a38 <HAL_GPIO_Init+0x350>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001a38 <HAL_GPIO_Init+0x350>)
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a38 <HAL_GPIO_Init+0x350>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019ec:	4a12      	ldr	r2, [pc, #72]	@ (8001a38 <HAL_GPIO_Init+0x350>)
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	3301      	adds	r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f47f ae78 	bne.w	80016f8 <HAL_GPIO_Init+0x10>
  }
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	371c      	adds	r7, #28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40010000 	.word	0x40010000
 8001a20:	48000400 	.word	0x48000400
 8001a24:	48000800 	.word	0x48000800
 8001a28:	48000c00 	.word	0x48000c00
 8001a2c:	48001000 	.word	0x48001000
 8001a30:	48001400 	.word	0x48001400
 8001a34:	48001800 	.word	0x48001800
 8001a38:	40010400 	.word	0x40010400

08001a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a4c:	787b      	ldrb	r3, [r7, #1]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a52:	887a      	ldrh	r2, [r7, #2]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a58:	e002      	b.n	8001a60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a5a:	887a      	ldrh	r2, [r7, #2]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e08d      	b.n	8001b9a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d106      	bne.n	8001a98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff f862 	bl	8000b5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2224      	movs	r2, #36	@ 0x24
 8001a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0201 	bic.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001abc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001acc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d107      	bne.n	8001ae6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	e006      	b.n	8001af4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001af2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d108      	bne.n	8001b0e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	e007      	b.n	8001b1e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69d9      	ldr	r1, [r3, #28]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1a      	ldr	r2, [r3, #32]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2220      	movs	r2, #32
 8001b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d138      	bne.n	8001c2a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d101      	bne.n	8001bc6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e032      	b.n	8001c2c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2224      	movs	r2, #36	@ 0x24
 8001bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0201 	bic.w	r2, r2, #1
 8001be4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001bf4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6819      	ldr	r1, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f042 0201 	orr.w	r2, r2, #1
 8001c14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2220      	movs	r2, #32
 8001c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	e000      	b.n	8001c2c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c2a:	2302      	movs	r3, #2
  }
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b20      	cmp	r3, #32
 8001c4c:	d139      	bne.n	8001cc2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d101      	bne.n	8001c5c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e033      	b.n	8001cc4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2224      	movs	r2, #36	@ 0x24
 8001c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0201 	bic.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001c8a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	021b      	lsls	r3, r3, #8
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0201 	orr.w	r2, r2, #1
 8001cac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e000      	b.n	8001cc4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cc2:	2302      	movs	r3, #2
  }
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001cd4:	4b04      	ldr	r3, [pc, #16]	@ (8001ce8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40007000 	.word	0x40007000

08001cec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cfa:	d130      	bne.n	8001d5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cfc:	4b23      	ldr	r3, [pc, #140]	@ (8001d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d08:	d038      	beq.n	8001d7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d0a:	4b20      	ldr	r3, [pc, #128]	@ (8001d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d12:	4a1e      	ldr	r2, [pc, #120]	@ (8001d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2232      	movs	r2, #50	@ 0x32
 8001d20:	fb02 f303 	mul.w	r3, r2, r3
 8001d24:	4a1b      	ldr	r2, [pc, #108]	@ (8001d94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d26:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2a:	0c9b      	lsrs	r3, r3, #18
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d30:	e002      	b.n	8001d38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d38:	4b14      	ldr	r3, [pc, #80]	@ (8001d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d44:	d102      	bne.n	8001d4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1f2      	bne.n	8001d32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d58:	d110      	bne.n	8001d7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e00f      	b.n	8001d7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d6a:	d007      	beq.n	8001d7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d6c:	4b07      	ldr	r3, [pc, #28]	@ (8001d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d74:	4a05      	ldr	r2, [pc, #20]	@ (8001d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40007000 	.word	0x40007000
 8001d90:	20000090 	.word	0x20000090
 8001d94:	431bde83 	.word	0x431bde83

08001d98 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e3ca      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001daa:	4b97      	ldr	r3, [pc, #604]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001db4:	4b94      	ldr	r3, [pc, #592]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 80e4 	beq.w	8001f94 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d007      	beq.n	8001de2 <HAL_RCC_OscConfig+0x4a>
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	2b0c      	cmp	r3, #12
 8001dd6:	f040 808b 	bne.w	8001ef0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	f040 8087 	bne.w	8001ef0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001de2:	4b89      	ldr	r3, [pc, #548]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d005      	beq.n	8001dfa <HAL_RCC_OscConfig+0x62>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e3a2      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a1a      	ldr	r2, [r3, #32]
 8001dfe:	4b82      	ldr	r3, [pc, #520]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d004      	beq.n	8001e14 <HAL_RCC_OscConfig+0x7c>
 8001e0a:	4b7f      	ldr	r3, [pc, #508]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e12:	e005      	b.n	8001e20 <HAL_RCC_OscConfig+0x88>
 8001e14:	4b7c      	ldr	r3, [pc, #496]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e1a:	091b      	lsrs	r3, r3, #4
 8001e1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d223      	bcs.n	8001e6c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 fd55 	bl	80028d8 <RCC_SetFlashLatencyFromMSIRange>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e383      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e38:	4b73      	ldr	r3, [pc, #460]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a72      	ldr	r2, [pc, #456]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001e3e:	f043 0308 	orr.w	r3, r3, #8
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4b70      	ldr	r3, [pc, #448]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	496d      	ldr	r1, [pc, #436]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e56:	4b6c      	ldr	r3, [pc, #432]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	021b      	lsls	r3, r3, #8
 8001e64:	4968      	ldr	r1, [pc, #416]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	604b      	str	r3, [r1, #4]
 8001e6a:	e025      	b.n	8001eb8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e6c:	4b66      	ldr	r3, [pc, #408]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a65      	ldr	r2, [pc, #404]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001e72:	f043 0308 	orr.w	r3, r3, #8
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b63      	ldr	r3, [pc, #396]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	4960      	ldr	r1, [pc, #384]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e8a:	4b5f      	ldr	r3, [pc, #380]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	495b      	ldr	r1, [pc, #364]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d109      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 fd15 	bl	80028d8 <RCC_SetFlashLatencyFromMSIRange>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e343      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001eb8:	f000 fc4a 	bl	8002750 <HAL_RCC_GetSysClockFreq>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b52      	ldr	r3, [pc, #328]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	091b      	lsrs	r3, r3, #4
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	4950      	ldr	r1, [pc, #320]	@ (800200c <HAL_RCC_OscConfig+0x274>)
 8001eca:	5ccb      	ldrb	r3, [r1, r3]
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed4:	4a4e      	ldr	r2, [pc, #312]	@ (8002010 <HAL_RCC_OscConfig+0x278>)
 8001ed6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ed8:	4b4e      	ldr	r3, [pc, #312]	@ (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fffb 	bl	8000ed8 <HAL_InitTick>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d052      	beq.n	8001f92 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	e327      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d032      	beq.n	8001f5e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ef8:	4b43      	ldr	r3, [pc, #268]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a42      	ldr	r2, [pc, #264]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f04:	f7ff f838 	bl	8000f78 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f0c:	f7ff f834 	bl	8000f78 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e310      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f1e:	4b3a      	ldr	r3, [pc, #232]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f2a:	4b37      	ldr	r3, [pc, #220]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a36      	ldr	r2, [pc, #216]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001f30:	f043 0308 	orr.w	r3, r3, #8
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	4b34      	ldr	r3, [pc, #208]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	4931      	ldr	r1, [pc, #196]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f48:	4b2f      	ldr	r3, [pc, #188]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	021b      	lsls	r3, r3, #8
 8001f56:	492c      	ldr	r1, [pc, #176]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
 8001f5c:	e01a      	b.n	8001f94 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a29      	ldr	r2, [pc, #164]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f6a:	f7ff f805 	bl	8000f78 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f72:	f7ff f801 	bl	8000f78 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e2dd      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f84:	4b20      	ldr	r3, [pc, #128]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1f0      	bne.n	8001f72 <HAL_RCC_OscConfig+0x1da>
 8001f90:	e000      	b.n	8001f94 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f92:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d074      	beq.n	800208a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d005      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x21a>
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	2b0c      	cmp	r3, #12
 8001faa:	d10e      	bne.n	8001fca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d10b      	bne.n	8001fca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb2:	4b15      	ldr	r3, [pc, #84]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d064      	beq.n	8002088 <HAL_RCC_OscConfig+0x2f0>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d160      	bne.n	8002088 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e2ba      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x24a>
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a0b      	ldr	r2, [pc, #44]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001fda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	e026      	b.n	8002030 <HAL_RCC_OscConfig+0x298>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fea:	d115      	bne.n	8002018 <HAL_RCC_OscConfig+0x280>
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a05      	ldr	r2, [pc, #20]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001ff2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	4b03      	ldr	r3, [pc, #12]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a02      	ldr	r2, [pc, #8]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001ffe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	e014      	b.n	8002030 <HAL_RCC_OscConfig+0x298>
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	080059ec 	.word	0x080059ec
 8002010:	20000090 	.word	0x20000090
 8002014:	20000094 	.word	0x20000094
 8002018:	4ba0      	ldr	r3, [pc, #640]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a9f      	ldr	r2, [pc, #636]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 800201e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	4b9d      	ldr	r3, [pc, #628]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a9c      	ldr	r2, [pc, #624]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 800202a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800202e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d013      	beq.n	8002060 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7fe ff9e 	bl	8000f78 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002040:	f7fe ff9a 	bl	8000f78 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b64      	cmp	r3, #100	@ 0x64
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e276      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002052:	4b92      	ldr	r3, [pc, #584]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0x2a8>
 800205e:	e014      	b.n	800208a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7fe ff8a 	bl	8000f78 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002068:	f7fe ff86 	bl	8000f78 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	@ 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e262      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800207a:	4b88      	ldr	r3, [pc, #544]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x2d0>
 8002086:	e000      	b.n	800208a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d060      	beq.n	8002158 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	2b04      	cmp	r3, #4
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_OscConfig+0x310>
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	2b0c      	cmp	r3, #12
 80020a0:	d119      	bne.n	80020d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d116      	bne.n	80020d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020a8:	4b7c      	ldr	r3, [pc, #496]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_OscConfig+0x328>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e23f      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c0:	4b76      	ldr	r3, [pc, #472]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	061b      	lsls	r3, r3, #24
 80020ce:	4973      	ldr	r1, [pc, #460]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020d4:	e040      	b.n	8002158 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d023      	beq.n	8002126 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020de:	4b6f      	ldr	r3, [pc, #444]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a6e      	ldr	r2, [pc, #440]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 80020e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ea:	f7fe ff45 	bl	8000f78 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f2:	f7fe ff41 	bl	8000f78 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e21d      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002104:	4b65      	ldr	r3, [pc, #404]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002110:	4b62      	ldr	r3, [pc, #392]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	061b      	lsls	r3, r3, #24
 800211e:	495f      	ldr	r1, [pc, #380]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
 8002124:	e018      	b.n	8002158 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002126:	4b5d      	ldr	r3, [pc, #372]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a5c      	ldr	r2, [pc, #368]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 800212c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002132:	f7fe ff21 	bl	8000f78 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800213a:	f7fe ff1d 	bl	8000f78 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e1f9      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800214c:	4b53      	ldr	r3, [pc, #332]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1f0      	bne.n	800213a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d03c      	beq.n	80021de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01c      	beq.n	80021a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800216c:	4b4b      	ldr	r3, [pc, #300]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 800216e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002172:	4a4a      	ldr	r2, [pc, #296]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217c:	f7fe fefc 	bl	8000f78 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002184:	f7fe fef8 	bl	8000f78 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e1d4      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002196:	4b41      	ldr	r3, [pc, #260]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 8002198:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0ef      	beq.n	8002184 <HAL_RCC_OscConfig+0x3ec>
 80021a4:	e01b      	b.n	80021de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a6:	4b3d      	ldr	r3, [pc, #244]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 80021a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021ac:	4a3b      	ldr	r2, [pc, #236]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 80021ae:	f023 0301 	bic.w	r3, r3, #1
 80021b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b6:	f7fe fedf 	bl	8000f78 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021be:	f7fe fedb 	bl	8000f78 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e1b7      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021d0:	4b32      	ldr	r3, [pc, #200]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 80021d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1ef      	bne.n	80021be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 80a6 	beq.w	8002338 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ec:	2300      	movs	r3, #0
 80021ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021f0:	4b2a      	ldr	r3, [pc, #168]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 80021f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10d      	bne.n	8002218 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fc:	4b27      	ldr	r3, [pc, #156]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 80021fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002200:	4a26      	ldr	r2, [pc, #152]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 8002202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002206:	6593      	str	r3, [r2, #88]	@ 0x58
 8002208:	4b24      	ldr	r3, [pc, #144]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 800220a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002214:	2301      	movs	r3, #1
 8002216:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002218:	4b21      	ldr	r3, [pc, #132]	@ (80022a0 <HAL_RCC_OscConfig+0x508>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002220:	2b00      	cmp	r3, #0
 8002222:	d118      	bne.n	8002256 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002224:	4b1e      	ldr	r3, [pc, #120]	@ (80022a0 <HAL_RCC_OscConfig+0x508>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a1d      	ldr	r2, [pc, #116]	@ (80022a0 <HAL_RCC_OscConfig+0x508>)
 800222a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800222e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002230:	f7fe fea2 	bl	8000f78 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002238:	f7fe fe9e 	bl	8000f78 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e17a      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800224a:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <HAL_RCC_OscConfig+0x508>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d108      	bne.n	8002270 <HAL_RCC_OscConfig+0x4d8>
 800225e:	4b0f      	ldr	r3, [pc, #60]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 8002260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002264:	4a0d      	ldr	r2, [pc, #52]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800226e:	e029      	b.n	80022c4 <HAL_RCC_OscConfig+0x52c>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b05      	cmp	r3, #5
 8002276:	d115      	bne.n	80022a4 <HAL_RCC_OscConfig+0x50c>
 8002278:	4b08      	ldr	r3, [pc, #32]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 800227a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800227e:	4a07      	ldr	r2, [pc, #28]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 8002280:	f043 0304 	orr.w	r3, r3, #4
 8002284:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002288:	4b04      	ldr	r3, [pc, #16]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 800228a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800228e:	4a03      	ldr	r2, [pc, #12]	@ (800229c <HAL_RCC_OscConfig+0x504>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002298:	e014      	b.n	80022c4 <HAL_RCC_OscConfig+0x52c>
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
 80022a0:	40007000 	.word	0x40007000
 80022a4:	4b9c      	ldr	r3, [pc, #624]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022aa:	4a9b      	ldr	r2, [pc, #620]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 80022ac:	f023 0301 	bic.w	r3, r3, #1
 80022b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022b4:	4b98      	ldr	r3, [pc, #608]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ba:	4a97      	ldr	r2, [pc, #604]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 80022bc:	f023 0304 	bic.w	r3, r3, #4
 80022c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d016      	beq.n	80022fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022cc:	f7fe fe54 	bl	8000f78 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022d2:	e00a      	b.n	80022ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d4:	f7fe fe50 	bl	8000f78 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e12a      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ea:	4b8b      	ldr	r3, [pc, #556]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 80022ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0ed      	beq.n	80022d4 <HAL_RCC_OscConfig+0x53c>
 80022f8:	e015      	b.n	8002326 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fa:	f7fe fe3d 	bl	8000f78 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002300:	e00a      	b.n	8002318 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002302:	f7fe fe39 	bl	8000f78 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002310:	4293      	cmp	r3, r2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e113      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002318:	4b7f      	ldr	r3, [pc, #508]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 800231a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1ed      	bne.n	8002302 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002326:	7ffb      	ldrb	r3, [r7, #31]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d105      	bne.n	8002338 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232c:	4b7a      	ldr	r3, [pc, #488]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 800232e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002330:	4a79      	ldr	r2, [pc, #484]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 8002332:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002336:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80fe 	beq.w	800253e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002346:	2b02      	cmp	r3, #2
 8002348:	f040 80d0 	bne.w	80024ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800234c:	4b72      	ldr	r3, [pc, #456]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f003 0203 	and.w	r2, r3, #3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235c:	429a      	cmp	r2, r3
 800235e:	d130      	bne.n	80023c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236a:	3b01      	subs	r3, #1
 800236c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800236e:	429a      	cmp	r2, r3
 8002370:	d127      	bne.n	80023c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800237c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d11f      	bne.n	80023c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800238c:	2a07      	cmp	r2, #7
 800238e:	bf14      	ite	ne
 8002390:	2201      	movne	r2, #1
 8002392:	2200      	moveq	r2, #0
 8002394:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002396:	4293      	cmp	r3, r2
 8002398:	d113      	bne.n	80023c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a4:	085b      	lsrs	r3, r3, #1
 80023a6:	3b01      	subs	r3, #1
 80023a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d109      	bne.n	80023c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	085b      	lsrs	r3, r3, #1
 80023ba:	3b01      	subs	r3, #1
 80023bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023be:	429a      	cmp	r2, r3
 80023c0:	d06e      	beq.n	80024a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	2b0c      	cmp	r3, #12
 80023c6:	d069      	beq.n	800249c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023c8:	4b53      	ldr	r3, [pc, #332]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d105      	bne.n	80023e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80023d4:	4b50      	ldr	r3, [pc, #320]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0ad      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 80023ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023f0:	f7fe fdc2 	bl	8000f78 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f8:	f7fe fdbe 	bl	8000f78 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e09a      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800240a:	4b43      	ldr	r3, [pc, #268]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002416:	4b40      	ldr	r3, [pc, #256]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	4b40      	ldr	r3, [pc, #256]	@ (800251c <HAL_RCC_OscConfig+0x784>)
 800241c:	4013      	ands	r3, r2
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002426:	3a01      	subs	r2, #1
 8002428:	0112      	lsls	r2, r2, #4
 800242a:	4311      	orrs	r1, r2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002430:	0212      	lsls	r2, r2, #8
 8002432:	4311      	orrs	r1, r2
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002438:	0852      	lsrs	r2, r2, #1
 800243a:	3a01      	subs	r2, #1
 800243c:	0552      	lsls	r2, r2, #21
 800243e:	4311      	orrs	r1, r2
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002444:	0852      	lsrs	r2, r2, #1
 8002446:	3a01      	subs	r2, #1
 8002448:	0652      	lsls	r2, r2, #25
 800244a:	4311      	orrs	r1, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002450:	0912      	lsrs	r2, r2, #4
 8002452:	0452      	lsls	r2, r2, #17
 8002454:	430a      	orrs	r2, r1
 8002456:	4930      	ldr	r1, [pc, #192]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 8002458:	4313      	orrs	r3, r2
 800245a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800245c:	4b2e      	ldr	r3, [pc, #184]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a2d      	ldr	r2, [pc, #180]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 8002462:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002466:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002468:	4b2b      	ldr	r3, [pc, #172]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4a2a      	ldr	r2, [pc, #168]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 800246e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002472:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002474:	f7fe fd80 	bl	8000f78 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247c:	f7fe fd7c 	bl	8000f78 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e058      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800248e:	4b22      	ldr	r3, [pc, #136]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800249a:	e050      	b.n	800253e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e04f      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d148      	bne.n	800253e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a19      	ldr	r2, [pc, #100]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 80024b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024b8:	4b17      	ldr	r3, [pc, #92]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4a16      	ldr	r2, [pc, #88]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 80024be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024c4:	f7fe fd58 	bl	8000f78 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024cc:	f7fe fd54 	bl	8000f78 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e030      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024de:	4b0e      	ldr	r3, [pc, #56]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0x734>
 80024ea:	e028      	b.n	800253e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	2b0c      	cmp	r3, #12
 80024f0:	d023      	beq.n	800253a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f2:	4b09      	ldr	r3, [pc, #36]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a08      	ldr	r2, [pc, #32]	@ (8002518 <HAL_RCC_OscConfig+0x780>)
 80024f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fe:	f7fe fd3b 	bl	8000f78 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002504:	e00c      	b.n	8002520 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002506:	f7fe fd37 	bl	8000f78 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d905      	bls.n	8002520 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e013      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
 8002518:	40021000 	.word	0x40021000
 800251c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002520:	4b09      	ldr	r3, [pc, #36]	@ (8002548 <HAL_RCC_OscConfig+0x7b0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1ec      	bne.n	8002506 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800252c:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <HAL_RCC_OscConfig+0x7b0>)
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	4905      	ldr	r1, [pc, #20]	@ (8002548 <HAL_RCC_OscConfig+0x7b0>)
 8002532:	4b06      	ldr	r3, [pc, #24]	@ (800254c <HAL_RCC_OscConfig+0x7b4>)
 8002534:	4013      	ands	r3, r2
 8002536:	60cb      	str	r3, [r1, #12]
 8002538:	e001      	b.n	800253e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3720      	adds	r7, #32
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40021000 	.word	0x40021000
 800254c:	feeefffc 	.word	0xfeeefffc

08002550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0e7      	b.n	8002734 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002564:	4b75      	ldr	r3, [pc, #468]	@ (800273c <HAL_RCC_ClockConfig+0x1ec>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d910      	bls.n	8002594 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002572:	4b72      	ldr	r3, [pc, #456]	@ (800273c <HAL_RCC_ClockConfig+0x1ec>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 0207 	bic.w	r2, r3, #7
 800257a:	4970      	ldr	r1, [pc, #448]	@ (800273c <HAL_RCC_ClockConfig+0x1ec>)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	4313      	orrs	r3, r2
 8002580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002582:	4b6e      	ldr	r3, [pc, #440]	@ (800273c <HAL_RCC_ClockConfig+0x1ec>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0cf      	b.n	8002734 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d010      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	4b66      	ldr	r3, [pc, #408]	@ (8002740 <HAL_RCC_ClockConfig+0x1f0>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d908      	bls.n	80025c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b0:	4b63      	ldr	r3, [pc, #396]	@ (8002740 <HAL_RCC_ClockConfig+0x1f0>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	4960      	ldr	r1, [pc, #384]	@ (8002740 <HAL_RCC_ClockConfig+0x1f0>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d04c      	beq.n	8002668 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d107      	bne.n	80025e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025d6:	4b5a      	ldr	r3, [pc, #360]	@ (8002740 <HAL_RCC_ClockConfig+0x1f0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d121      	bne.n	8002626 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e0a6      	b.n	8002734 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d107      	bne.n	80025fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ee:	4b54      	ldr	r3, [pc, #336]	@ (8002740 <HAL_RCC_ClockConfig+0x1f0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d115      	bne.n	8002626 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e09a      	b.n	8002734 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d107      	bne.n	8002616 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002606:	4b4e      	ldr	r3, [pc, #312]	@ (8002740 <HAL_RCC_ClockConfig+0x1f0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d109      	bne.n	8002626 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e08e      	b.n	8002734 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002616:	4b4a      	ldr	r3, [pc, #296]	@ (8002740 <HAL_RCC_ClockConfig+0x1f0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e086      	b.n	8002734 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002626:	4b46      	ldr	r3, [pc, #280]	@ (8002740 <HAL_RCC_ClockConfig+0x1f0>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f023 0203 	bic.w	r2, r3, #3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	4943      	ldr	r1, [pc, #268]	@ (8002740 <HAL_RCC_ClockConfig+0x1f0>)
 8002634:	4313      	orrs	r3, r2
 8002636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002638:	f7fe fc9e 	bl	8000f78 <HAL_GetTick>
 800263c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263e:	e00a      	b.n	8002656 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002640:	f7fe fc9a 	bl	8000f78 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e06e      	b.n	8002734 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002656:	4b3a      	ldr	r3, [pc, #232]	@ (8002740 <HAL_RCC_ClockConfig+0x1f0>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 020c 	and.w	r2, r3, #12
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	429a      	cmp	r2, r3
 8002666:	d1eb      	bne.n	8002640 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d010      	beq.n	8002696 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	4b31      	ldr	r3, [pc, #196]	@ (8002740 <HAL_RCC_ClockConfig+0x1f0>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002680:	429a      	cmp	r2, r3
 8002682:	d208      	bcs.n	8002696 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002684:	4b2e      	ldr	r3, [pc, #184]	@ (8002740 <HAL_RCC_ClockConfig+0x1f0>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	492b      	ldr	r1, [pc, #172]	@ (8002740 <HAL_RCC_ClockConfig+0x1f0>)
 8002692:	4313      	orrs	r3, r2
 8002694:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002696:	4b29      	ldr	r3, [pc, #164]	@ (800273c <HAL_RCC_ClockConfig+0x1ec>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d210      	bcs.n	80026c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a4:	4b25      	ldr	r3, [pc, #148]	@ (800273c <HAL_RCC_ClockConfig+0x1ec>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f023 0207 	bic.w	r2, r3, #7
 80026ac:	4923      	ldr	r1, [pc, #140]	@ (800273c <HAL_RCC_ClockConfig+0x1ec>)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b4:	4b21      	ldr	r3, [pc, #132]	@ (800273c <HAL_RCC_ClockConfig+0x1ec>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d001      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e036      	b.n	8002734 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d008      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002740 <HAL_RCC_ClockConfig+0x1f0>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	4918      	ldr	r1, [pc, #96]	@ (8002740 <HAL_RCC_ClockConfig+0x1f0>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d009      	beq.n	8002704 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026f0:	4b13      	ldr	r3, [pc, #76]	@ (8002740 <HAL_RCC_ClockConfig+0x1f0>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4910      	ldr	r1, [pc, #64]	@ (8002740 <HAL_RCC_ClockConfig+0x1f0>)
 8002700:	4313      	orrs	r3, r2
 8002702:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002704:	f000 f824 	bl	8002750 <HAL_RCC_GetSysClockFreq>
 8002708:	4602      	mov	r2, r0
 800270a:	4b0d      	ldr	r3, [pc, #52]	@ (8002740 <HAL_RCC_ClockConfig+0x1f0>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	091b      	lsrs	r3, r3, #4
 8002710:	f003 030f 	and.w	r3, r3, #15
 8002714:	490b      	ldr	r1, [pc, #44]	@ (8002744 <HAL_RCC_ClockConfig+0x1f4>)
 8002716:	5ccb      	ldrb	r3, [r1, r3]
 8002718:	f003 031f 	and.w	r3, r3, #31
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
 8002720:	4a09      	ldr	r2, [pc, #36]	@ (8002748 <HAL_RCC_ClockConfig+0x1f8>)
 8002722:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002724:	4b09      	ldr	r3, [pc, #36]	@ (800274c <HAL_RCC_ClockConfig+0x1fc>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7fe fbd5 	bl	8000ed8 <HAL_InitTick>
 800272e:	4603      	mov	r3, r0
 8002730:	72fb      	strb	r3, [r7, #11]

  return status;
 8002732:	7afb      	ldrb	r3, [r7, #11]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40022000 	.word	0x40022000
 8002740:	40021000 	.word	0x40021000
 8002744:	080059ec 	.word	0x080059ec
 8002748:	20000090 	.word	0x20000090
 800274c:	20000094 	.word	0x20000094

08002750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	@ 0x24
 8002754:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800275e:	4b3e      	ldr	r3, [pc, #248]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x108>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002768:	4b3b      	ldr	r3, [pc, #236]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x108>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0x34>
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	2b0c      	cmp	r3, #12
 800277c:	d121      	bne.n	80027c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d11e      	bne.n	80027c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002784:	4b34      	ldr	r3, [pc, #208]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x108>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b00      	cmp	r3, #0
 800278e:	d107      	bne.n	80027a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002790:	4b31      	ldr	r3, [pc, #196]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x108>)
 8002792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002796:	0a1b      	lsrs	r3, r3, #8
 8002798:	f003 030f 	and.w	r3, r3, #15
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	e005      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x108>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027ac:	4a2b      	ldr	r2, [pc, #172]	@ (800285c <HAL_RCC_GetSysClockFreq+0x10c>)
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10d      	bne.n	80027d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027c0:	e00a      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d102      	bne.n	80027ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027c8:	4b25      	ldr	r3, [pc, #148]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x110>)
 80027ca:	61bb      	str	r3, [r7, #24]
 80027cc:	e004      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d101      	bne.n	80027d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027d4:	4b23      	ldr	r3, [pc, #140]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x114>)
 80027d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	2b0c      	cmp	r3, #12
 80027dc:	d134      	bne.n	8002848 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027de:	4b1e      	ldr	r3, [pc, #120]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x108>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d003      	beq.n	80027f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d003      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0xac>
 80027f4:	e005      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x110>)
 80027f8:	617b      	str	r3, [r7, #20]
      break;
 80027fa:	e005      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027fc:	4b19      	ldr	r3, [pc, #100]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x114>)
 80027fe:	617b      	str	r3, [r7, #20]
      break;
 8002800:	e002      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	617b      	str	r3, [r7, #20]
      break;
 8002806:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002808:	4b13      	ldr	r3, [pc, #76]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x108>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	3301      	adds	r3, #1
 8002814:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002816:	4b10      	ldr	r3, [pc, #64]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x108>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	0a1b      	lsrs	r3, r3, #8
 800281c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	fb03 f202 	mul.w	r2, r3, r2
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	fbb2 f3f3 	udiv	r3, r2, r3
 800282c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800282e:	4b0a      	ldr	r3, [pc, #40]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x108>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	0e5b      	lsrs	r3, r3, #25
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	3301      	adds	r3, #1
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	fbb2 f3f3 	udiv	r3, r2, r3
 8002846:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002848:	69bb      	ldr	r3, [r7, #24]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3724      	adds	r7, #36	@ 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40021000 	.word	0x40021000
 800285c:	08005a04 	.word	0x08005a04
 8002860:	00f42400 	.word	0x00f42400
 8002864:	007a1200 	.word	0x007a1200

08002868 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800286c:	4b03      	ldr	r3, [pc, #12]	@ (800287c <HAL_RCC_GetHCLKFreq+0x14>)
 800286e:	681b      	ldr	r3, [r3, #0]
}
 8002870:	4618      	mov	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000090 	.word	0x20000090

08002880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002884:	f7ff fff0 	bl	8002868 <HAL_RCC_GetHCLKFreq>
 8002888:	4602      	mov	r2, r0
 800288a:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	0a1b      	lsrs	r3, r3, #8
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	4904      	ldr	r1, [pc, #16]	@ (80028a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002896:	5ccb      	ldrb	r3, [r1, r3]
 8002898:	f003 031f 	and.w	r3, r3, #31
 800289c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40021000 	.word	0x40021000
 80028a8:	080059fc 	.word	0x080059fc

080028ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028b0:	f7ff ffda 	bl	8002868 <HAL_RCC_GetHCLKFreq>
 80028b4:	4602      	mov	r2, r0
 80028b6:	4b06      	ldr	r3, [pc, #24]	@ (80028d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	0adb      	lsrs	r3, r3, #11
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	4904      	ldr	r1, [pc, #16]	@ (80028d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028c2:	5ccb      	ldrb	r3, [r1, r3]
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000
 80028d4:	080059fc 	.word	0x080059fc

080028d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028e0:	2300      	movs	r3, #0
 80028e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028f0:	f7ff f9ee 	bl	8001cd0 <HAL_PWREx_GetVoltageRange>
 80028f4:	6178      	str	r0, [r7, #20]
 80028f6:	e014      	b.n	8002922 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028f8:	4b25      	ldr	r3, [pc, #148]	@ (8002990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fc:	4a24      	ldr	r2, [pc, #144]	@ (8002990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002902:	6593      	str	r3, [r2, #88]	@ 0x58
 8002904:	4b22      	ldr	r3, [pc, #136]	@ (8002990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002910:	f7ff f9de 	bl	8001cd0 <HAL_PWREx_GetVoltageRange>
 8002914:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002916:	4b1e      	ldr	r3, [pc, #120]	@ (8002990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291a:	4a1d      	ldr	r2, [pc, #116]	@ (8002990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800291c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002920:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002928:	d10b      	bne.n	8002942 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b80      	cmp	r3, #128	@ 0x80
 800292e:	d919      	bls.n	8002964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2ba0      	cmp	r3, #160	@ 0xa0
 8002934:	d902      	bls.n	800293c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002936:	2302      	movs	r3, #2
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	e013      	b.n	8002964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800293c:	2301      	movs	r3, #1
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	e010      	b.n	8002964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b80      	cmp	r3, #128	@ 0x80
 8002946:	d902      	bls.n	800294e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002948:	2303      	movs	r3, #3
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	e00a      	b.n	8002964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b80      	cmp	r3, #128	@ 0x80
 8002952:	d102      	bne.n	800295a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002954:	2302      	movs	r3, #2
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	e004      	b.n	8002964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b70      	cmp	r3, #112	@ 0x70
 800295e:	d101      	bne.n	8002964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002960:	2301      	movs	r3, #1
 8002962:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002964:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f023 0207 	bic.w	r2, r3, #7
 800296c:	4909      	ldr	r1, [pc, #36]	@ (8002994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002974:	4b07      	ldr	r3, [pc, #28]	@ (8002994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	429a      	cmp	r2, r3
 8002980:	d001      	beq.n	8002986 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40021000 	.word	0x40021000
 8002994:	40022000 	.word	0x40022000

08002998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029a0:	2300      	movs	r3, #0
 80029a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029a4:	2300      	movs	r3, #0
 80029a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d041      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80029bc:	d02a      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80029be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80029c2:	d824      	bhi.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80029c8:	d008      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80029ce:	d81e      	bhi.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80029d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029d8:	d010      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029da:	e018      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029dc:	4b86      	ldr	r3, [pc, #536]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	4a85      	ldr	r2, [pc, #532]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029e8:	e015      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3304      	adds	r3, #4
 80029ee:	2100      	movs	r1, #0
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 fabb 	bl	8002f6c <RCCEx_PLLSAI1_Config>
 80029f6:	4603      	mov	r3, r0
 80029f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029fa:	e00c      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3320      	adds	r3, #32
 8002a00:	2100      	movs	r1, #0
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 fba6 	bl	8003154 <RCCEx_PLLSAI2_Config>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a0c:	e003      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	74fb      	strb	r3, [r7, #19]
      break;
 8002a12:	e000      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a16:	7cfb      	ldrb	r3, [r7, #19]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10b      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a1c:	4b76      	ldr	r3, [pc, #472]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a22:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a2a:	4973      	ldr	r1, [pc, #460]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002a32:	e001      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a34:	7cfb      	ldrb	r3, [r7, #19]
 8002a36:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d041      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a48:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002a4c:	d02a      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002a4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002a52:	d824      	bhi.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a58:	d008      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a5e:	d81e      	bhi.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00a      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002a64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a68:	d010      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a6a:	e018      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a6c:	4b62      	ldr	r3, [pc, #392]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4a61      	ldr	r2, [pc, #388]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a78:	e015      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fa73 	bl	8002f6c <RCCEx_PLLSAI1_Config>
 8002a86:	4603      	mov	r3, r0
 8002a88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a8a:	e00c      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3320      	adds	r3, #32
 8002a90:	2100      	movs	r1, #0
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 fb5e 	bl	8003154 <RCCEx_PLLSAI2_Config>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a9c:	e003      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	74fb      	strb	r3, [r7, #19]
      break;
 8002aa2:	e000      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002aa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aa6:	7cfb      	ldrb	r3, [r7, #19]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10b      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002aac:	4b52      	ldr	r3, [pc, #328]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002aba:	494f      	ldr	r1, [pc, #316]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002ac2:	e001      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac4:	7cfb      	ldrb	r3, [r7, #19]
 8002ac6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 80a0 	beq.w	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ada:	4b47      	ldr	r3, [pc, #284]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002aea:	2300      	movs	r3, #0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00d      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af0:	4b41      	ldr	r3, [pc, #260]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af4:	4a40      	ldr	r2, [pc, #256]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002af6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002afa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002afc:	4b3e      	ldr	r3, [pc, #248]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a3a      	ldr	r2, [pc, #232]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b18:	f7fe fa2e 	bl	8000f78 <HAL_GetTick>
 8002b1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b1e:	e009      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b20:	f7fe fa2a 	bl	8000f78 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d902      	bls.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	74fb      	strb	r3, [r7, #19]
        break;
 8002b32:	e005      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b34:	4b31      	ldr	r3, [pc, #196]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0ef      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002b40:	7cfb      	ldrb	r3, [r7, #19]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d15c      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b46:	4b2c      	ldr	r3, [pc, #176]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d01f      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d019      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b64:	4b24      	ldr	r3, [pc, #144]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b70:	4b21      	ldr	r3, [pc, #132]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b76:	4a20      	ldr	r2, [pc, #128]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b80:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b86:	4a1c      	ldr	r2, [pc, #112]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b90:	4a19      	ldr	r2, [pc, #100]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d016      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba2:	f7fe f9e9 	bl	8000f78 <HAL_GetTick>
 8002ba6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba8:	e00b      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002baa:	f7fe f9e5 	bl	8000f78 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d902      	bls.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	74fb      	strb	r3, [r7, #19]
            break;
 8002bc0:	e006      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0ec      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002bd0:	7cfb      	ldrb	r3, [r7, #19]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bd6:	4b08      	ldr	r3, [pc, #32]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002be6:	4904      	ldr	r1, [pc, #16]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002bee:	e009      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bf0:	7cfb      	ldrb	r3, [r7, #19]
 8002bf2:	74bb      	strb	r3, [r7, #18]
 8002bf4:	e006      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002bf6:	bf00      	nop
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c00:	7cfb      	ldrb	r3, [r7, #19]
 8002c02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c04:	7c7b      	ldrb	r3, [r7, #17]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d105      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0a:	4b9e      	ldr	r3, [pc, #632]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0e:	4a9d      	ldr	r2, [pc, #628]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c14:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c22:	4b98      	ldr	r3, [pc, #608]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c28:	f023 0203 	bic.w	r2, r3, #3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c30:	4994      	ldr	r1, [pc, #592]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00a      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c44:	4b8f      	ldr	r3, [pc, #572]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c4a:	f023 020c 	bic.w	r2, r3, #12
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c52:	498c      	ldr	r1, [pc, #560]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c66:	4b87      	ldr	r3, [pc, #540]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c6c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c74:	4983      	ldr	r1, [pc, #524]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00a      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c88:	4b7e      	ldr	r3, [pc, #504]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c96:	497b      	ldr	r1, [pc, #492]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0310 	and.w	r3, r3, #16
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002caa:	4b76      	ldr	r3, [pc, #472]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cb8:	4972      	ldr	r1, [pc, #456]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0320 	and.w	r3, r3, #32
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00a      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ccc:	4b6d      	ldr	r3, [pc, #436]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cda:	496a      	ldr	r1, [pc, #424]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cee:	4b65      	ldr	r3, [pc, #404]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfc:	4961      	ldr	r1, [pc, #388]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d10:	4b5c      	ldr	r3, [pc, #368]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d1e:	4959      	ldr	r1, [pc, #356]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d32:	4b54      	ldr	r3, [pc, #336]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d38:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d40:	4950      	ldr	r1, [pc, #320]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d54:	4b4b      	ldr	r3, [pc, #300]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d5a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d62:	4948      	ldr	r1, [pc, #288]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d76:	4b43      	ldr	r3, [pc, #268]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d84:	493f      	ldr	r1, [pc, #252]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d028      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d98:	4b3a      	ldr	r3, [pc, #232]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002da6:	4937      	ldr	r1, [pc, #220]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002db2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002db6:	d106      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002db8:	4b32      	ldr	r3, [pc, #200]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	4a31      	ldr	r2, [pc, #196]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dc2:	60d3      	str	r3, [r2, #12]
 8002dc4:	e011      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002dce:	d10c      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f8c8 	bl	8002f6c <RCCEx_PLLSAI1_Config>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002de6:	7cfb      	ldrb	r3, [r7, #19]
 8002de8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d028      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002df6:	4b23      	ldr	r3, [pc, #140]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e04:	491f      	ldr	r1, [pc, #124]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e14:	d106      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e16:	4b1b      	ldr	r3, [pc, #108]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	4a1a      	ldr	r2, [pc, #104]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e20:	60d3      	str	r3, [r2, #12]
 8002e22:	e011      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e2c:	d10c      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3304      	adds	r3, #4
 8002e32:	2101      	movs	r1, #1
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 f899 	bl	8002f6c <RCCEx_PLLSAI1_Config>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e3e:	7cfb      	ldrb	r3, [r7, #19]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002e44:	7cfb      	ldrb	r3, [r7, #19]
 8002e46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d02b      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e54:	4b0b      	ldr	r3, [pc, #44]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e62:	4908      	ldr	r1, [pc, #32]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e72:	d109      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e74:	4b03      	ldr	r3, [pc, #12]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	4a02      	ldr	r2, [pc, #8]	@ (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e7e:	60d3      	str	r3, [r2, #12]
 8002e80:	e014      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e90:	d10c      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3304      	adds	r3, #4
 8002e96:	2101      	movs	r1, #1
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 f867 	bl	8002f6c <RCCEx_PLLSAI1_Config>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ea2:	7cfb      	ldrb	r3, [r7, #19]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ea8:	7cfb      	ldrb	r3, [r7, #19]
 8002eaa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d02f      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ebe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ec6:	4928      	ldr	r1, [pc, #160]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ed2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ed6:	d10d      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3304      	adds	r3, #4
 8002edc:	2102      	movs	r1, #2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 f844 	bl	8002f6c <RCCEx_PLLSAI1_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ee8:	7cfb      	ldrb	r3, [r7, #19]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d014      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002eee:	7cfb      	ldrb	r3, [r7, #19]
 8002ef0:	74bb      	strb	r3, [r7, #18]
 8002ef2:	e011      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ef8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3320      	adds	r3, #32
 8002f02:	2102      	movs	r1, #2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 f925 	bl	8003154 <RCCEx_PLLSAI2_Config>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f0e:	7cfb      	ldrb	r3, [r7, #19]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f14:	7cfb      	ldrb	r3, [r7, #19]
 8002f16:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00a      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f24:	4b10      	ldr	r3, [pc, #64]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f2a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f32:	490d      	ldr	r1, [pc, #52]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00b      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f46:	4b08      	ldr	r3, [pc, #32]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f56:	4904      	ldr	r1, [pc, #16]	@ (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40021000 	.word	0x40021000

08002f6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f7a:	4b75      	ldr	r3, [pc, #468]	@ (8003150 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d018      	beq.n	8002fb8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f86:	4b72      	ldr	r3, [pc, #456]	@ (8003150 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f003 0203 	and.w	r2, r3, #3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d10d      	bne.n	8002fb2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
       ||
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d009      	beq.n	8002fb2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f9e:	4b6c      	ldr	r3, [pc, #432]	@ (8003150 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	091b      	lsrs	r3, r3, #4
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
       ||
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d047      	beq.n	8003042 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	73fb      	strb	r3, [r7, #15]
 8002fb6:	e044      	b.n	8003042 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d018      	beq.n	8002ff2 <RCCEx_PLLSAI1_Config+0x86>
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d825      	bhi.n	8003010 <RCCEx_PLLSAI1_Config+0xa4>
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d002      	beq.n	8002fce <RCCEx_PLLSAI1_Config+0x62>
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d009      	beq.n	8002fe0 <RCCEx_PLLSAI1_Config+0x74>
 8002fcc:	e020      	b.n	8003010 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fce:	4b60      	ldr	r3, [pc, #384]	@ (8003150 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d11d      	bne.n	8003016 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fde:	e01a      	b.n	8003016 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fe0:	4b5b      	ldr	r3, [pc, #364]	@ (8003150 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d116      	bne.n	800301a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ff0:	e013      	b.n	800301a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ff2:	4b57      	ldr	r3, [pc, #348]	@ (8003150 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10f      	bne.n	800301e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ffe:	4b54      	ldr	r3, [pc, #336]	@ (8003150 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800300e:	e006      	b.n	800301e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
      break;
 8003014:	e004      	b.n	8003020 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003016:	bf00      	nop
 8003018:	e002      	b.n	8003020 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800301a:	bf00      	nop
 800301c:	e000      	b.n	8003020 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800301e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10d      	bne.n	8003042 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003026:	4b4a      	ldr	r3, [pc, #296]	@ (8003150 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6819      	ldr	r1, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	3b01      	subs	r3, #1
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	430b      	orrs	r3, r1
 800303c:	4944      	ldr	r1, [pc, #272]	@ (8003150 <RCCEx_PLLSAI1_Config+0x1e4>)
 800303e:	4313      	orrs	r3, r2
 8003040:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d17d      	bne.n	8003144 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003048:	4b41      	ldr	r3, [pc, #260]	@ (8003150 <RCCEx_PLLSAI1_Config+0x1e4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a40      	ldr	r2, [pc, #256]	@ (8003150 <RCCEx_PLLSAI1_Config+0x1e4>)
 800304e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003052:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003054:	f7fd ff90 	bl	8000f78 <HAL_GetTick>
 8003058:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800305a:	e009      	b.n	8003070 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800305c:	f7fd ff8c 	bl	8000f78 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d902      	bls.n	8003070 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	73fb      	strb	r3, [r7, #15]
        break;
 800306e:	e005      	b.n	800307c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003070:	4b37      	ldr	r3, [pc, #220]	@ (8003150 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1ef      	bne.n	800305c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d160      	bne.n	8003144 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d111      	bne.n	80030ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003088:	4b31      	ldr	r3, [pc, #196]	@ (8003150 <RCCEx_PLLSAI1_Config+0x1e4>)
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003090:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6892      	ldr	r2, [r2, #8]
 8003098:	0211      	lsls	r1, r2, #8
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	68d2      	ldr	r2, [r2, #12]
 800309e:	0912      	lsrs	r2, r2, #4
 80030a0:	0452      	lsls	r2, r2, #17
 80030a2:	430a      	orrs	r2, r1
 80030a4:	492a      	ldr	r1, [pc, #168]	@ (8003150 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	610b      	str	r3, [r1, #16]
 80030aa:	e027      	b.n	80030fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d112      	bne.n	80030d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030b2:	4b27      	ldr	r3, [pc, #156]	@ (8003150 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80030ba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6892      	ldr	r2, [r2, #8]
 80030c2:	0211      	lsls	r1, r2, #8
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6912      	ldr	r2, [r2, #16]
 80030c8:	0852      	lsrs	r2, r2, #1
 80030ca:	3a01      	subs	r2, #1
 80030cc:	0552      	lsls	r2, r2, #21
 80030ce:	430a      	orrs	r2, r1
 80030d0:	491f      	ldr	r1, [pc, #124]	@ (8003150 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	610b      	str	r3, [r1, #16]
 80030d6:	e011      	b.n	80030fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003150 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80030e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6892      	ldr	r2, [r2, #8]
 80030e8:	0211      	lsls	r1, r2, #8
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6952      	ldr	r2, [r2, #20]
 80030ee:	0852      	lsrs	r2, r2, #1
 80030f0:	3a01      	subs	r2, #1
 80030f2:	0652      	lsls	r2, r2, #25
 80030f4:	430a      	orrs	r2, r1
 80030f6:	4916      	ldr	r1, [pc, #88]	@ (8003150 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030fc:	4b14      	ldr	r3, [pc, #80]	@ (8003150 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a13      	ldr	r2, [pc, #76]	@ (8003150 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003102:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003106:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003108:	f7fd ff36 	bl	8000f78 <HAL_GetTick>
 800310c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800310e:	e009      	b.n	8003124 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003110:	f7fd ff32 	bl	8000f78 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d902      	bls.n	8003124 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	73fb      	strb	r3, [r7, #15]
          break;
 8003122:	e005      	b.n	8003130 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003124:	4b0a      	ldr	r3, [pc, #40]	@ (8003150 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0ef      	beq.n	8003110 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003136:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003138:	691a      	ldr	r2, [r3, #16]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	4904      	ldr	r1, [pc, #16]	@ (8003150 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003140:	4313      	orrs	r3, r2
 8003142:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003144:	7bfb      	ldrb	r3, [r7, #15]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40021000 	.word	0x40021000

08003154 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003162:	4b6a      	ldr	r3, [pc, #424]	@ (800330c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d018      	beq.n	80031a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800316e:	4b67      	ldr	r3, [pc, #412]	@ (800330c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f003 0203 	and.w	r2, r3, #3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d10d      	bne.n	800319a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
       ||
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003186:	4b61      	ldr	r3, [pc, #388]	@ (800330c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	091b      	lsrs	r3, r3, #4
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
       ||
 8003196:	429a      	cmp	r2, r3
 8003198:	d047      	beq.n	800322a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	73fb      	strb	r3, [r7, #15]
 800319e:	e044      	b.n	800322a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d018      	beq.n	80031da <RCCEx_PLLSAI2_Config+0x86>
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d825      	bhi.n	80031f8 <RCCEx_PLLSAI2_Config+0xa4>
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d002      	beq.n	80031b6 <RCCEx_PLLSAI2_Config+0x62>
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d009      	beq.n	80031c8 <RCCEx_PLLSAI2_Config+0x74>
 80031b4:	e020      	b.n	80031f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031b6:	4b55      	ldr	r3, [pc, #340]	@ (800330c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d11d      	bne.n	80031fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c6:	e01a      	b.n	80031fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031c8:	4b50      	ldr	r3, [pc, #320]	@ (800330c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d116      	bne.n	8003202 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031d8:	e013      	b.n	8003202 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031da:	4b4c      	ldr	r3, [pc, #304]	@ (800330c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10f      	bne.n	8003206 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031e6:	4b49      	ldr	r3, [pc, #292]	@ (800330c <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d109      	bne.n	8003206 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031f6:	e006      	b.n	8003206 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
      break;
 80031fc:	e004      	b.n	8003208 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031fe:	bf00      	nop
 8003200:	e002      	b.n	8003208 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003202:	bf00      	nop
 8003204:	e000      	b.n	8003208 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003206:	bf00      	nop
    }

    if(status == HAL_OK)
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10d      	bne.n	800322a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800320e:	4b3f      	ldr	r3, [pc, #252]	@ (800330c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6819      	ldr	r1, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	3b01      	subs	r3, #1
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	430b      	orrs	r3, r1
 8003224:	4939      	ldr	r1, [pc, #228]	@ (800330c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003226:	4313      	orrs	r3, r2
 8003228:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d167      	bne.n	8003300 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003230:	4b36      	ldr	r3, [pc, #216]	@ (800330c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a35      	ldr	r2, [pc, #212]	@ (800330c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003236:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800323a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800323c:	f7fd fe9c 	bl	8000f78 <HAL_GetTick>
 8003240:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003242:	e009      	b.n	8003258 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003244:	f7fd fe98 	bl	8000f78 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d902      	bls.n	8003258 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	73fb      	strb	r3, [r7, #15]
        break;
 8003256:	e005      	b.n	8003264 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003258:	4b2c      	ldr	r3, [pc, #176]	@ (800330c <RCCEx_PLLSAI2_Config+0x1b8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1ef      	bne.n	8003244 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d14a      	bne.n	8003300 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d111      	bne.n	8003294 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003270:	4b26      	ldr	r3, [pc, #152]	@ (800330c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003278:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6892      	ldr	r2, [r2, #8]
 8003280:	0211      	lsls	r1, r2, #8
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	68d2      	ldr	r2, [r2, #12]
 8003286:	0912      	lsrs	r2, r2, #4
 8003288:	0452      	lsls	r2, r2, #17
 800328a:	430a      	orrs	r2, r1
 800328c:	491f      	ldr	r1, [pc, #124]	@ (800330c <RCCEx_PLLSAI2_Config+0x1b8>)
 800328e:	4313      	orrs	r3, r2
 8003290:	614b      	str	r3, [r1, #20]
 8003292:	e011      	b.n	80032b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003294:	4b1d      	ldr	r3, [pc, #116]	@ (800330c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800329c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6892      	ldr	r2, [r2, #8]
 80032a4:	0211      	lsls	r1, r2, #8
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6912      	ldr	r2, [r2, #16]
 80032aa:	0852      	lsrs	r2, r2, #1
 80032ac:	3a01      	subs	r2, #1
 80032ae:	0652      	lsls	r2, r2, #25
 80032b0:	430a      	orrs	r2, r1
 80032b2:	4916      	ldr	r1, [pc, #88]	@ (800330c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80032b8:	4b14      	ldr	r3, [pc, #80]	@ (800330c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a13      	ldr	r2, [pc, #76]	@ (800330c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c4:	f7fd fe58 	bl	8000f78 <HAL_GetTick>
 80032c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032ca:	e009      	b.n	80032e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032cc:	f7fd fe54 	bl	8000f78 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d902      	bls.n	80032e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	73fb      	strb	r3, [r7, #15]
          break;
 80032de:	e005      	b.n	80032ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032e0:	4b0a      	ldr	r3, [pc, #40]	@ (800330c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0ef      	beq.n	80032cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d106      	bne.n	8003300 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80032f2:	4b06      	ldr	r3, [pc, #24]	@ (800330c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	4904      	ldr	r1, [pc, #16]	@ (800330c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003300:	7bfb      	ldrb	r3, [r7, #15]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40021000 	.word	0x40021000

08003310 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e040      	b.n	80033a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fd fc70 	bl	8000c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2224      	movs	r2, #36	@ 0x24
 800333c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0201 	bic.w	r2, r2, #1
 800334c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fee4 	bl	8004124 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 fc29 	bl	8003bb4 <UART_SetConfig>
 8003362:	4603      	mov	r3, r0
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e01b      	b.n	80033a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800337a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800338a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 ff63 	bl	8004268 <UART_CheckIdleState>
 80033a2:	4603      	mov	r3, r0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08a      	sub	sp, #40	@ 0x28
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	603b      	str	r3, [r7, #0]
 80033b8:	4613      	mov	r3, r2
 80033ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d177      	bne.n	80034b4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HAL_UART_Transmit+0x24>
 80033ca:	88fb      	ldrh	r3, [r7, #6]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e070      	b.n	80034b6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2221      	movs	r2, #33	@ 0x21
 80033e0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033e2:	f7fd fdc9 	bl	8000f78 <HAL_GetTick>
 80033e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	88fa      	ldrh	r2, [r7, #6]
 80033ec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	88fa      	ldrh	r2, [r7, #6]
 80033f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003400:	d108      	bne.n	8003414 <HAL_UART_Transmit+0x68>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d104      	bne.n	8003414 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800340a:	2300      	movs	r3, #0
 800340c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	61bb      	str	r3, [r7, #24]
 8003412:	e003      	b.n	800341c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003418:	2300      	movs	r3, #0
 800341a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800341c:	e02f      	b.n	800347e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2200      	movs	r2, #0
 8003426:	2180      	movs	r1, #128	@ 0x80
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 ffc5 	bl	80043b8 <UART_WaitOnFlagUntilTimeout>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d004      	beq.n	800343e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2220      	movs	r2, #32
 8003438:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e03b      	b.n	80034b6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10b      	bne.n	800345c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	881a      	ldrh	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003450:	b292      	uxth	r2, r2
 8003452:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	3302      	adds	r3, #2
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	e007      	b.n	800346c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	781a      	ldrb	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	3301      	adds	r3, #1
 800346a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003472:	b29b      	uxth	r3, r3
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003484:	b29b      	uxth	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1c9      	bne.n	800341e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2200      	movs	r2, #0
 8003492:	2140      	movs	r1, #64	@ 0x40
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 ff8f 	bl	80043b8 <UART_WaitOnFlagUntilTimeout>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d004      	beq.n	80034aa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e005      	b.n	80034b6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2220      	movs	r2, #32
 80034ae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e000      	b.n	80034b6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80034b4:	2302      	movs	r3, #2
  }
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3720      	adds	r7, #32
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08a      	sub	sp, #40	@ 0x28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	4613      	mov	r3, r2
 80034cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d137      	bne.n	8003548 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_UART_Receive_IT+0x24>
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e030      	b.n	800354a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a18      	ldr	r2, [pc, #96]	@ (8003554 <HAL_UART_Receive_IT+0x94>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d01f      	beq.n	8003538 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d018      	beq.n	8003538 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	e853 3f00 	ldrex	r3, [r3]
 8003512:	613b      	str	r3, [r7, #16]
   return(result);
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003524:	623b      	str	r3, [r7, #32]
 8003526:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003528:	69f9      	ldr	r1, [r7, #28]
 800352a:	6a3a      	ldr	r2, [r7, #32]
 800352c:	e841 2300 	strex	r3, r2, [r1]
 8003530:	61bb      	str	r3, [r7, #24]
   return(result);
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1e6      	bne.n	8003506 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	461a      	mov	r2, r3
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 ffa8 	bl	8004494 <UART_Start_Receive_IT>
 8003544:	4603      	mov	r3, r0
 8003546:	e000      	b.n	800354a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003548:	2302      	movs	r3, #2
  }
}
 800354a:	4618      	mov	r0, r3
 800354c:	3728      	adds	r7, #40	@ 0x28
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40008000 	.word	0x40008000

08003558 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b0ba      	sub	sp, #232	@ 0xe8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800357e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003582:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003586:	4013      	ands	r3, r2
 8003588:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800358c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d115      	bne.n	80035c0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00f      	beq.n	80035c0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a4:	f003 0320 	and.w	r3, r3, #32
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d009      	beq.n	80035c0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 82ca 	beq.w	8003b4a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	4798      	blx	r3
      }
      return;
 80035be:	e2c4      	b.n	8003b4a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80035c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 8117 	beq.w	80037f8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80035ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80035d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80035da:	4b85      	ldr	r3, [pc, #532]	@ (80037f0 <HAL_UART_IRQHandler+0x298>)
 80035dc:	4013      	ands	r3, r2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 810a 	beq.w	80037f8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d011      	beq.n	8003614 <HAL_UART_IRQHandler+0xbc>
 80035f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00b      	beq.n	8003614 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2201      	movs	r2, #1
 8003602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800360a:	f043 0201 	orr.w	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d011      	beq.n	8003644 <HAL_UART_IRQHandler+0xec>
 8003620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00b      	beq.n	8003644 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2202      	movs	r2, #2
 8003632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800363a:	f043 0204 	orr.w	r2, r3, #4
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d011      	beq.n	8003674 <HAL_UART_IRQHandler+0x11c>
 8003650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00b      	beq.n	8003674 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2204      	movs	r2, #4
 8003662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800366a:	f043 0202 	orr.w	r2, r3, #2
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003678:	f003 0308 	and.w	r3, r3, #8
 800367c:	2b00      	cmp	r3, #0
 800367e:	d017      	beq.n	80036b0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	2b00      	cmp	r3, #0
 800368a:	d105      	bne.n	8003698 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800368c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003690:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00b      	beq.n	80036b0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2208      	movs	r2, #8
 800369e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036a6:	f043 0208 	orr.w	r2, r3, #8
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d012      	beq.n	80036e2 <HAL_UART_IRQHandler+0x18a>
 80036bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00c      	beq.n	80036e2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036d8:	f043 0220 	orr.w	r2, r3, #32
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 8230 	beq.w	8003b4e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80036ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00d      	beq.n	8003716 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800371c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372a:	2b40      	cmp	r3, #64	@ 0x40
 800372c:	d005      	beq.n	800373a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800372e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003732:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003736:	2b00      	cmp	r3, #0
 8003738:	d04f      	beq.n	80037da <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f001 f836 	bl	80047ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374a:	2b40      	cmp	r3, #64	@ 0x40
 800374c:	d141      	bne.n	80037d2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3308      	adds	r3, #8
 8003754:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003758:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800375c:	e853 3f00 	ldrex	r3, [r3]
 8003760:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003764:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003768:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800376c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3308      	adds	r3, #8
 8003776:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800377a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800377e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003782:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003786:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800378a:	e841 2300 	strex	r3, r2, [r1]
 800378e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003792:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1d9      	bne.n	800374e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d013      	beq.n	80037ca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037a6:	4a13      	ldr	r2, [pc, #76]	@ (80037f4 <HAL_UART_IRQHandler+0x29c>)
 80037a8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fd fe7a 	bl	80014a8 <HAL_DMA_Abort_IT>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d017      	beq.n	80037ea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80037c4:	4610      	mov	r0, r2
 80037c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c8:	e00f      	b.n	80037ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f9e8 	bl	8003ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d0:	e00b      	b.n	80037ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f9e4 	bl	8003ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d8:	e007      	b.n	80037ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f9e0 	bl	8003ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80037e8:	e1b1      	b.n	8003b4e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ea:	bf00      	nop
    return;
 80037ec:	e1af      	b.n	8003b4e <HAL_UART_IRQHandler+0x5f6>
 80037ee:	bf00      	nop
 80037f0:	04000120 	.word	0x04000120
 80037f4:	08004a5d 	.word	0x08004a5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	f040 816a 	bne.w	8003ad6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 8163 	beq.w	8003ad6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 815c 	beq.w	8003ad6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2210      	movs	r2, #16
 8003824:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003830:	2b40      	cmp	r3, #64	@ 0x40
 8003832:	f040 80d4 	bne.w	80039de <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003842:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 80ad 	beq.w	80039a6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003852:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003856:	429a      	cmp	r2, r3
 8003858:	f080 80a5 	bcs.w	80039a6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003862:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b00      	cmp	r3, #0
 8003874:	f040 8086 	bne.w	8003984 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003880:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003884:	e853 3f00 	ldrex	r3, [r3]
 8003888:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800388c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003890:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003894:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	461a      	mov	r2, r3
 800389e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80038a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80038a6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038b2:	e841 2300 	strex	r3, r2, [r1]
 80038b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80038ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1da      	bne.n	8003878 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3308      	adds	r3, #8
 80038c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038cc:	e853 3f00 	ldrex	r3, [r3]
 80038d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80038d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038d4:	f023 0301 	bic.w	r3, r3, #1
 80038d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3308      	adds	r3, #8
 80038e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80038e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80038ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80038ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80038f2:	e841 2300 	strex	r3, r2, [r1]
 80038f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80038f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1e1      	bne.n	80038c2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3308      	adds	r3, #8
 8003904:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003906:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800390e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003910:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003914:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3308      	adds	r3, #8
 800391e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003922:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003924:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003926:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003928:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800392a:	e841 2300 	strex	r3, r2, [r1]
 800392e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003930:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1e3      	bne.n	80038fe <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800394c:	e853 3f00 	ldrex	r3, [r3]
 8003950:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003954:	f023 0310 	bic.w	r3, r3, #16
 8003958:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003966:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003968:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800396c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800396e:	e841 2300 	strex	r3, r2, [r1]
 8003972:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003974:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1e4      	bne.n	8003944 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800397e:	4618      	mov	r0, r3
 8003980:	f7fd fd54 	bl	800142c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003996:	b29b      	uxth	r3, r3
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	b29b      	uxth	r3, r3
 800399c:	4619      	mov	r1, r3
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fc ff5a 	bl	8000858 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80039a4:	e0d5      	b.n	8003b52 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80039ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039b0:	429a      	cmp	r2, r3
 80039b2:	f040 80ce 	bne.w	8003b52 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	f040 80c5 	bne.w	8003b52 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80039d4:	4619      	mov	r1, r3
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7fc ff3e 	bl	8000858 <HAL_UARTEx_RxEventCallback>
      return;
 80039dc:	e0b9      	b.n	8003b52 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80ab 	beq.w	8003b56 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003a00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 80a6 	beq.w	8003b56 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a12:	e853 3f00 	ldrex	r3, [r3]
 8003a16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a2e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a34:	e841 2300 	strex	r3, r2, [r1]
 8003a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e4      	bne.n	8003a0a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3308      	adds	r3, #8
 8003a46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4a:	e853 3f00 	ldrex	r3, [r3]
 8003a4e:	623b      	str	r3, [r7, #32]
   return(result);
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	f023 0301 	bic.w	r3, r3, #1
 8003a56:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3308      	adds	r3, #8
 8003a60:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a64:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a6c:	e841 2300 	strex	r3, r2, [r1]
 8003a70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1e3      	bne.n	8003a40 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f023 0310 	bic.w	r3, r3, #16
 8003aa0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	69b9      	ldr	r1, [r7, #24]
 8003ab4:	69fa      	ldr	r2, [r7, #28]
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	617b      	str	r3, [r7, #20]
   return(result);
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e4      	bne.n	8003a8c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ac8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003acc:	4619      	mov	r1, r3
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fc fec2 	bl	8000858 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ad4:	e03f      	b.n	8003b56 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ada:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00e      	beq.n	8003b00 <HAL_UART_IRQHandler+0x5a8>
 8003ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d008      	beq.n	8003b00 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003af6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f001 f9ab 	bl	8004e54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003afe:	e02d      	b.n	8003b5c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00e      	beq.n	8003b2a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d01c      	beq.n	8003b5a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4798      	blx	r3
    }
    return;
 8003b28:	e017      	b.n	8003b5a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d012      	beq.n	8003b5c <HAL_UART_IRQHandler+0x604>
 8003b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00c      	beq.n	8003b5c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 ffa0 	bl	8004a88 <UART_EndTransmit_IT>
    return;
 8003b48:	e008      	b.n	8003b5c <HAL_UART_IRQHandler+0x604>
      return;
 8003b4a:	bf00      	nop
 8003b4c:	e006      	b.n	8003b5c <HAL_UART_IRQHandler+0x604>
    return;
 8003b4e:	bf00      	nop
 8003b50:	e004      	b.n	8003b5c <HAL_UART_IRQHandler+0x604>
      return;
 8003b52:	bf00      	nop
 8003b54:	e002      	b.n	8003b5c <HAL_UART_IRQHandler+0x604>
      return;
 8003b56:	bf00      	nop
 8003b58:	e000      	b.n	8003b5c <HAL_UART_IRQHandler+0x604>
    return;
 8003b5a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003b5c:	37e8      	adds	r7, #232	@ 0xe8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop

08003b64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb8:	b08a      	sub	sp, #40	@ 0x28
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	4ba4      	ldr	r3, [pc, #656]	@ (8003e74 <UART_SetConfig+0x2c0>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	6812      	ldr	r2, [r2, #0]
 8003bea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bec:	430b      	orrs	r3, r1
 8003bee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a99      	ldr	r2, [pc, #612]	@ (8003e78 <UART_SetConfig+0x2c4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d004      	beq.n	8003c20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c30:	430a      	orrs	r2, r1
 8003c32:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a90      	ldr	r2, [pc, #576]	@ (8003e7c <UART_SetConfig+0x2c8>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d126      	bne.n	8003c8c <UART_SetConfig+0xd8>
 8003c3e:	4b90      	ldr	r3, [pc, #576]	@ (8003e80 <UART_SetConfig+0x2cc>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c44:	f003 0303 	and.w	r3, r3, #3
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d81b      	bhi.n	8003c84 <UART_SetConfig+0xd0>
 8003c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c54 <UART_SetConfig+0xa0>)
 8003c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c52:	bf00      	nop
 8003c54:	08003c65 	.word	0x08003c65
 8003c58:	08003c75 	.word	0x08003c75
 8003c5c:	08003c6d 	.word	0x08003c6d
 8003c60:	08003c7d 	.word	0x08003c7d
 8003c64:	2301      	movs	r3, #1
 8003c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c6a:	e116      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c72:	e112      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003c74:	2304      	movs	r3, #4
 8003c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c7a:	e10e      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003c7c:	2308      	movs	r3, #8
 8003c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c82:	e10a      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003c84:	2310      	movs	r3, #16
 8003c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c8a:	e106      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a7c      	ldr	r2, [pc, #496]	@ (8003e84 <UART_SetConfig+0x2d0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d138      	bne.n	8003d08 <UART_SetConfig+0x154>
 8003c96:	4b7a      	ldr	r3, [pc, #488]	@ (8003e80 <UART_SetConfig+0x2cc>)
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9c:	f003 030c 	and.w	r3, r3, #12
 8003ca0:	2b0c      	cmp	r3, #12
 8003ca2:	d82d      	bhi.n	8003d00 <UART_SetConfig+0x14c>
 8003ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cac <UART_SetConfig+0xf8>)
 8003ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003caa:	bf00      	nop
 8003cac:	08003ce1 	.word	0x08003ce1
 8003cb0:	08003d01 	.word	0x08003d01
 8003cb4:	08003d01 	.word	0x08003d01
 8003cb8:	08003d01 	.word	0x08003d01
 8003cbc:	08003cf1 	.word	0x08003cf1
 8003cc0:	08003d01 	.word	0x08003d01
 8003cc4:	08003d01 	.word	0x08003d01
 8003cc8:	08003d01 	.word	0x08003d01
 8003ccc:	08003ce9 	.word	0x08003ce9
 8003cd0:	08003d01 	.word	0x08003d01
 8003cd4:	08003d01 	.word	0x08003d01
 8003cd8:	08003d01 	.word	0x08003d01
 8003cdc:	08003cf9 	.word	0x08003cf9
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ce6:	e0d8      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cee:	e0d4      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cf6:	e0d0      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003cf8:	2308      	movs	r3, #8
 8003cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cfe:	e0cc      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003d00:	2310      	movs	r3, #16
 8003d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d06:	e0c8      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a5e      	ldr	r2, [pc, #376]	@ (8003e88 <UART_SetConfig+0x2d4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d125      	bne.n	8003d5e <UART_SetConfig+0x1aa>
 8003d12:	4b5b      	ldr	r3, [pc, #364]	@ (8003e80 <UART_SetConfig+0x2cc>)
 8003d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d18:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d1c:	2b30      	cmp	r3, #48	@ 0x30
 8003d1e:	d016      	beq.n	8003d4e <UART_SetConfig+0x19a>
 8003d20:	2b30      	cmp	r3, #48	@ 0x30
 8003d22:	d818      	bhi.n	8003d56 <UART_SetConfig+0x1a2>
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d00a      	beq.n	8003d3e <UART_SetConfig+0x18a>
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d814      	bhi.n	8003d56 <UART_SetConfig+0x1a2>
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <UART_SetConfig+0x182>
 8003d30:	2b10      	cmp	r3, #16
 8003d32:	d008      	beq.n	8003d46 <UART_SetConfig+0x192>
 8003d34:	e00f      	b.n	8003d56 <UART_SetConfig+0x1a2>
 8003d36:	2300      	movs	r3, #0
 8003d38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d3c:	e0ad      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d44:	e0a9      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003d46:	2304      	movs	r3, #4
 8003d48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d4c:	e0a5      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003d4e:	2308      	movs	r3, #8
 8003d50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d54:	e0a1      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003d56:	2310      	movs	r3, #16
 8003d58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d5c:	e09d      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a4a      	ldr	r2, [pc, #296]	@ (8003e8c <UART_SetConfig+0x2d8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d125      	bne.n	8003db4 <UART_SetConfig+0x200>
 8003d68:	4b45      	ldr	r3, [pc, #276]	@ (8003e80 <UART_SetConfig+0x2cc>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003d72:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d74:	d016      	beq.n	8003da4 <UART_SetConfig+0x1f0>
 8003d76:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d78:	d818      	bhi.n	8003dac <UART_SetConfig+0x1f8>
 8003d7a:	2b80      	cmp	r3, #128	@ 0x80
 8003d7c:	d00a      	beq.n	8003d94 <UART_SetConfig+0x1e0>
 8003d7e:	2b80      	cmp	r3, #128	@ 0x80
 8003d80:	d814      	bhi.n	8003dac <UART_SetConfig+0x1f8>
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <UART_SetConfig+0x1d8>
 8003d86:	2b40      	cmp	r3, #64	@ 0x40
 8003d88:	d008      	beq.n	8003d9c <UART_SetConfig+0x1e8>
 8003d8a:	e00f      	b.n	8003dac <UART_SetConfig+0x1f8>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d92:	e082      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003d94:	2302      	movs	r3, #2
 8003d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d9a:	e07e      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003d9c:	2304      	movs	r3, #4
 8003d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003da2:	e07a      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003da4:	2308      	movs	r3, #8
 8003da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003daa:	e076      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003dac:	2310      	movs	r3, #16
 8003dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003db2:	e072      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a35      	ldr	r2, [pc, #212]	@ (8003e90 <UART_SetConfig+0x2dc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d12a      	bne.n	8003e14 <UART_SetConfig+0x260>
 8003dbe:	4b30      	ldr	r3, [pc, #192]	@ (8003e80 <UART_SetConfig+0x2cc>)
 8003dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dcc:	d01a      	beq.n	8003e04 <UART_SetConfig+0x250>
 8003dce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dd2:	d81b      	bhi.n	8003e0c <UART_SetConfig+0x258>
 8003dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dd8:	d00c      	beq.n	8003df4 <UART_SetConfig+0x240>
 8003dda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dde:	d815      	bhi.n	8003e0c <UART_SetConfig+0x258>
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <UART_SetConfig+0x238>
 8003de4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003de8:	d008      	beq.n	8003dfc <UART_SetConfig+0x248>
 8003dea:	e00f      	b.n	8003e0c <UART_SetConfig+0x258>
 8003dec:	2300      	movs	r3, #0
 8003dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003df2:	e052      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003df4:	2302      	movs	r3, #2
 8003df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dfa:	e04e      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e02:	e04a      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003e04:	2308      	movs	r3, #8
 8003e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e0a:	e046      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003e0c:	2310      	movs	r3, #16
 8003e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e12:	e042      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a17      	ldr	r2, [pc, #92]	@ (8003e78 <UART_SetConfig+0x2c4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d13a      	bne.n	8003e94 <UART_SetConfig+0x2e0>
 8003e1e:	4b18      	ldr	r3, [pc, #96]	@ (8003e80 <UART_SetConfig+0x2cc>)
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e2c:	d01a      	beq.n	8003e64 <UART_SetConfig+0x2b0>
 8003e2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e32:	d81b      	bhi.n	8003e6c <UART_SetConfig+0x2b8>
 8003e34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e38:	d00c      	beq.n	8003e54 <UART_SetConfig+0x2a0>
 8003e3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e3e:	d815      	bhi.n	8003e6c <UART_SetConfig+0x2b8>
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <UART_SetConfig+0x298>
 8003e44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e48:	d008      	beq.n	8003e5c <UART_SetConfig+0x2a8>
 8003e4a:	e00f      	b.n	8003e6c <UART_SetConfig+0x2b8>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e52:	e022      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003e54:	2302      	movs	r3, #2
 8003e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e5a:	e01e      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e62:	e01a      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003e64:	2308      	movs	r3, #8
 8003e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e6a:	e016      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003e6c:	2310      	movs	r3, #16
 8003e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e72:	e012      	b.n	8003e9a <UART_SetConfig+0x2e6>
 8003e74:	efff69f3 	.word	0xefff69f3
 8003e78:	40008000 	.word	0x40008000
 8003e7c:	40013800 	.word	0x40013800
 8003e80:	40021000 	.word	0x40021000
 8003e84:	40004400 	.word	0x40004400
 8003e88:	40004800 	.word	0x40004800
 8003e8c:	40004c00 	.word	0x40004c00
 8003e90:	40005000 	.word	0x40005000
 8003e94:	2310      	movs	r3, #16
 8003e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a9f      	ldr	r2, [pc, #636]	@ (800411c <UART_SetConfig+0x568>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d17a      	bne.n	8003f9a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ea4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d824      	bhi.n	8003ef6 <UART_SetConfig+0x342>
 8003eac:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb4 <UART_SetConfig+0x300>)
 8003eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb2:	bf00      	nop
 8003eb4:	08003ed9 	.word	0x08003ed9
 8003eb8:	08003ef7 	.word	0x08003ef7
 8003ebc:	08003ee1 	.word	0x08003ee1
 8003ec0:	08003ef7 	.word	0x08003ef7
 8003ec4:	08003ee7 	.word	0x08003ee7
 8003ec8:	08003ef7 	.word	0x08003ef7
 8003ecc:	08003ef7 	.word	0x08003ef7
 8003ed0:	08003ef7 	.word	0x08003ef7
 8003ed4:	08003eef 	.word	0x08003eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ed8:	f7fe fcd2 	bl	8002880 <HAL_RCC_GetPCLK1Freq>
 8003edc:	61f8      	str	r0, [r7, #28]
        break;
 8003ede:	e010      	b.n	8003f02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ee0:	4b8f      	ldr	r3, [pc, #572]	@ (8004120 <UART_SetConfig+0x56c>)
 8003ee2:	61fb      	str	r3, [r7, #28]
        break;
 8003ee4:	e00d      	b.n	8003f02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ee6:	f7fe fc33 	bl	8002750 <HAL_RCC_GetSysClockFreq>
 8003eea:	61f8      	str	r0, [r7, #28]
        break;
 8003eec:	e009      	b.n	8003f02 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ef2:	61fb      	str	r3, [r7, #28]
        break;
 8003ef4:	e005      	b.n	8003f02 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 80fb 	beq.w	8004100 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	4413      	add	r3, r2
 8003f14:	69fa      	ldr	r2, [r7, #28]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d305      	bcc.n	8003f26 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d903      	bls.n	8003f2e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f2c:	e0e8      	b.n	8004100 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	2200      	movs	r2, #0
 8003f32:	461c      	mov	r4, r3
 8003f34:	4615      	mov	r5, r2
 8003f36:	f04f 0200 	mov.w	r2, #0
 8003f3a:	f04f 0300 	mov.w	r3, #0
 8003f3e:	022b      	lsls	r3, r5, #8
 8003f40:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f44:	0222      	lsls	r2, r4, #8
 8003f46:	68f9      	ldr	r1, [r7, #12]
 8003f48:	6849      	ldr	r1, [r1, #4]
 8003f4a:	0849      	lsrs	r1, r1, #1
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	4688      	mov	r8, r1
 8003f50:	4681      	mov	r9, r0
 8003f52:	eb12 0a08 	adds.w	sl, r2, r8
 8003f56:	eb43 0b09 	adc.w	fp, r3, r9
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	603b      	str	r3, [r7, #0]
 8003f62:	607a      	str	r2, [r7, #4]
 8003f64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f68:	4650      	mov	r0, sl
 8003f6a:	4659      	mov	r1, fp
 8003f6c:	f7fc f988 	bl	8000280 <__aeabi_uldivmod>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4613      	mov	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f7e:	d308      	bcc.n	8003f92 <UART_SetConfig+0x3de>
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f86:	d204      	bcs.n	8003f92 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	60da      	str	r2, [r3, #12]
 8003f90:	e0b6      	b.n	8004100 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f98:	e0b2      	b.n	8004100 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fa2:	d15e      	bne.n	8004062 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003fa4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d828      	bhi.n	8003ffe <UART_SetConfig+0x44a>
 8003fac:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb4 <UART_SetConfig+0x400>)
 8003fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb2:	bf00      	nop
 8003fb4:	08003fd9 	.word	0x08003fd9
 8003fb8:	08003fe1 	.word	0x08003fe1
 8003fbc:	08003fe9 	.word	0x08003fe9
 8003fc0:	08003fff 	.word	0x08003fff
 8003fc4:	08003fef 	.word	0x08003fef
 8003fc8:	08003fff 	.word	0x08003fff
 8003fcc:	08003fff 	.word	0x08003fff
 8003fd0:	08003fff 	.word	0x08003fff
 8003fd4:	08003ff7 	.word	0x08003ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fd8:	f7fe fc52 	bl	8002880 <HAL_RCC_GetPCLK1Freq>
 8003fdc:	61f8      	str	r0, [r7, #28]
        break;
 8003fde:	e014      	b.n	800400a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fe0:	f7fe fc64 	bl	80028ac <HAL_RCC_GetPCLK2Freq>
 8003fe4:	61f8      	str	r0, [r7, #28]
        break;
 8003fe6:	e010      	b.n	800400a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe8:	4b4d      	ldr	r3, [pc, #308]	@ (8004120 <UART_SetConfig+0x56c>)
 8003fea:	61fb      	str	r3, [r7, #28]
        break;
 8003fec:	e00d      	b.n	800400a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fee:	f7fe fbaf 	bl	8002750 <HAL_RCC_GetSysClockFreq>
 8003ff2:	61f8      	str	r0, [r7, #28]
        break;
 8003ff4:	e009      	b.n	800400a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ffa:	61fb      	str	r3, [r7, #28]
        break;
 8003ffc:	e005      	b.n	800400a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004008:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d077      	beq.n	8004100 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	005a      	lsls	r2, r3, #1
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	085b      	lsrs	r3, r3, #1
 800401a:	441a      	add	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	fbb2 f3f3 	udiv	r3, r2, r3
 8004024:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	2b0f      	cmp	r3, #15
 800402a:	d916      	bls.n	800405a <UART_SetConfig+0x4a6>
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004032:	d212      	bcs.n	800405a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	b29b      	uxth	r3, r3
 8004038:	f023 030f 	bic.w	r3, r3, #15
 800403c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	085b      	lsrs	r3, r3, #1
 8004042:	b29b      	uxth	r3, r3
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	b29a      	uxth	r2, r3
 800404a:	8afb      	ldrh	r3, [r7, #22]
 800404c:	4313      	orrs	r3, r2
 800404e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	8afa      	ldrh	r2, [r7, #22]
 8004056:	60da      	str	r2, [r3, #12]
 8004058:	e052      	b.n	8004100 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004060:	e04e      	b.n	8004100 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004062:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004066:	2b08      	cmp	r3, #8
 8004068:	d827      	bhi.n	80040ba <UART_SetConfig+0x506>
 800406a:	a201      	add	r2, pc, #4	@ (adr r2, 8004070 <UART_SetConfig+0x4bc>)
 800406c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004070:	08004095 	.word	0x08004095
 8004074:	0800409d 	.word	0x0800409d
 8004078:	080040a5 	.word	0x080040a5
 800407c:	080040bb 	.word	0x080040bb
 8004080:	080040ab 	.word	0x080040ab
 8004084:	080040bb 	.word	0x080040bb
 8004088:	080040bb 	.word	0x080040bb
 800408c:	080040bb 	.word	0x080040bb
 8004090:	080040b3 	.word	0x080040b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004094:	f7fe fbf4 	bl	8002880 <HAL_RCC_GetPCLK1Freq>
 8004098:	61f8      	str	r0, [r7, #28]
        break;
 800409a:	e014      	b.n	80040c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800409c:	f7fe fc06 	bl	80028ac <HAL_RCC_GetPCLK2Freq>
 80040a0:	61f8      	str	r0, [r7, #28]
        break;
 80040a2:	e010      	b.n	80040c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004120 <UART_SetConfig+0x56c>)
 80040a6:	61fb      	str	r3, [r7, #28]
        break;
 80040a8:	e00d      	b.n	80040c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040aa:	f7fe fb51 	bl	8002750 <HAL_RCC_GetSysClockFreq>
 80040ae:	61f8      	str	r0, [r7, #28]
        break;
 80040b0:	e009      	b.n	80040c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040b6:	61fb      	str	r3, [r7, #28]
        break;
 80040b8:	e005      	b.n	80040c6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80040c4:	bf00      	nop
    }

    if (pclk != 0U)
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d019      	beq.n	8004100 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	085a      	lsrs	r2, r3, #1
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	441a      	add	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	fbb2 f3f3 	udiv	r3, r2, r3
 80040de:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	2b0f      	cmp	r3, #15
 80040e4:	d909      	bls.n	80040fa <UART_SetConfig+0x546>
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ec:	d205      	bcs.n	80040fa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	60da      	str	r2, [r3, #12]
 80040f8:	e002      	b.n	8004100 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800410c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004110:	4618      	mov	r0, r3
 8004112:	3728      	adds	r7, #40	@ 0x28
 8004114:	46bd      	mov	sp, r7
 8004116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800411a:	bf00      	nop
 800411c:	40008000 	.word	0x40008000
 8004120:	00f42400 	.word	0x00f42400

08004124 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01a      	beq.n	800423a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004222:	d10a      	bne.n	800423a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	605a      	str	r2, [r3, #4]
  }
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b098      	sub	sp, #96	@ 0x60
 800426c:	af02      	add	r7, sp, #8
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004278:	f7fc fe7e 	bl	8000f78 <HAL_GetTick>
 800427c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b08      	cmp	r3, #8
 800428a:	d12e      	bne.n	80042ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800428c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004294:	2200      	movs	r2, #0
 8004296:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f88c 	bl	80043b8 <UART_WaitOnFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d021      	beq.n	80042ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	461a      	mov	r2, r3
 80042c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80042c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042cc:	e841 2300 	strex	r3, r2, [r1]
 80042d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e6      	bne.n	80042a6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e062      	b.n	80043b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d149      	bne.n	800438c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004300:	2200      	movs	r2, #0
 8004302:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f856 	bl	80043b8 <UART_WaitOnFlagUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d03c      	beq.n	800438c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	623b      	str	r3, [r7, #32]
   return(result);
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004326:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004330:	633b      	str	r3, [r7, #48]	@ 0x30
 8004332:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800433e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e6      	bne.n	8004312 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3308      	adds	r3, #8
 800434a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	e853 3f00 	ldrex	r3, [r3]
 8004352:	60fb      	str	r3, [r7, #12]
   return(result);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0301 	bic.w	r3, r3, #1
 800435a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3308      	adds	r3, #8
 8004362:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004364:	61fa      	str	r2, [r7, #28]
 8004366:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004368:	69b9      	ldr	r1, [r7, #24]
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	e841 2300 	strex	r3, r2, [r1]
 8004370:	617b      	str	r3, [r7, #20]
   return(result);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e5      	bne.n	8004344 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e011      	b.n	80043b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2220      	movs	r2, #32
 8004390:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2220      	movs	r2, #32
 8004396:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3758      	adds	r7, #88	@ 0x58
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	4613      	mov	r3, r2
 80043c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c8:	e04f      	b.n	800446a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d0:	d04b      	beq.n	800446a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d2:	f7fc fdd1 	bl	8000f78 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d302      	bcc.n	80043e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e04e      	b.n	800448a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0304 	and.w	r3, r3, #4
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d037      	beq.n	800446a <UART_WaitOnFlagUntilTimeout+0xb2>
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b80      	cmp	r3, #128	@ 0x80
 80043fe:	d034      	beq.n	800446a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b40      	cmp	r3, #64	@ 0x40
 8004404:	d031      	beq.n	800446a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b08      	cmp	r3, #8
 8004412:	d110      	bne.n	8004436 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2208      	movs	r2, #8
 800441a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 f9c5 	bl	80047ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2208      	movs	r2, #8
 8004426:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e029      	b.n	800448a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004440:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004444:	d111      	bne.n	800446a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800444e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 f9ab 	bl	80047ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2220      	movs	r2, #32
 800445a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e00f      	b.n	800448a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4013      	ands	r3, r2
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	429a      	cmp	r2, r3
 8004478:	bf0c      	ite	eq
 800447a:	2301      	moveq	r3, #1
 800447c:	2300      	movne	r3, #0
 800447e:	b2db      	uxtb	r3, r3
 8004480:	461a      	mov	r2, r3
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	429a      	cmp	r2, r3
 8004486:	d0a0      	beq.n	80043ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004494:	b480      	push	{r7}
 8004496:	b097      	sub	sp, #92	@ 0x5c
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	4613      	mov	r3, r2
 80044a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	88fa      	ldrh	r2, [r7, #6]
 80044ac:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	88fa      	ldrh	r2, [r7, #6]
 80044b4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044c6:	d10e      	bne.n	80044e6 <UART_Start_Receive_IT+0x52>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d105      	bne.n	80044dc <UART_Start_Receive_IT+0x48>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80044d6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80044da:	e02d      	b.n	8004538 <UART_Start_Receive_IT+0xa4>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	22ff      	movs	r2, #255	@ 0xff
 80044e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80044e4:	e028      	b.n	8004538 <UART_Start_Receive_IT+0xa4>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10d      	bne.n	800450a <UART_Start_Receive_IT+0x76>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d104      	bne.n	8004500 <UART_Start_Receive_IT+0x6c>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	22ff      	movs	r2, #255	@ 0xff
 80044fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80044fe:	e01b      	b.n	8004538 <UART_Start_Receive_IT+0xa4>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	227f      	movs	r2, #127	@ 0x7f
 8004504:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004508:	e016      	b.n	8004538 <UART_Start_Receive_IT+0xa4>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004512:	d10d      	bne.n	8004530 <UART_Start_Receive_IT+0x9c>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d104      	bne.n	8004526 <UART_Start_Receive_IT+0x92>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	227f      	movs	r2, #127	@ 0x7f
 8004520:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004524:	e008      	b.n	8004538 <UART_Start_Receive_IT+0xa4>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	223f      	movs	r2, #63	@ 0x3f
 800452a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800452e:	e003      	b.n	8004538 <UART_Start_Receive_IT+0xa4>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2222      	movs	r2, #34	@ 0x22
 8004544:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3308      	adds	r3, #8
 800454e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800455a:	f043 0301 	orr.w	r3, r3, #1
 800455e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3308      	adds	r3, #8
 8004566:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004568:	64ba      	str	r2, [r7, #72]	@ 0x48
 800456a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800456e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e5      	bne.n	8004548 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004584:	d107      	bne.n	8004596 <UART_Start_Receive_IT+0x102>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d103      	bne.n	8004596 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4a21      	ldr	r2, [pc, #132]	@ (8004618 <UART_Start_Receive_IT+0x184>)
 8004592:	669a      	str	r2, [r3, #104]	@ 0x68
 8004594:	e002      	b.n	800459c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4a20      	ldr	r2, [pc, #128]	@ (800461c <UART_Start_Receive_IT+0x188>)
 800459a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d019      	beq.n	80045d8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ac:	e853 3f00 	ldrex	r3, [r3]
 80045b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80045b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80045c4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80045c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045ca:	e841 2300 	strex	r3, r2, [r1]
 80045ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80045d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1e6      	bne.n	80045a4 <UART_Start_Receive_IT+0x110>
 80045d6:	e018      	b.n	800460a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	e853 3f00 	ldrex	r3, [r3]
 80045e4:	613b      	str	r3, [r7, #16]
   return(result);
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f043 0320 	orr.w	r3, r3, #32
 80045ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045f6:	623b      	str	r3, [r7, #32]
 80045f8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fa:	69f9      	ldr	r1, [r7, #28]
 80045fc:	6a3a      	ldr	r2, [r7, #32]
 80045fe:	e841 2300 	strex	r3, r2, [r1]
 8004602:	61bb      	str	r3, [r7, #24]
   return(result);
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1e6      	bne.n	80045d8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	375c      	adds	r7, #92	@ 0x5c
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	08004c99 	.word	0x08004c99
 800461c:	08004add 	.word	0x08004add

08004620 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b096      	sub	sp, #88	@ 0x58
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	4613      	mov	r3, r2
 800462c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	88fa      	ldrh	r2, [r7, #6]
 8004638:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2222      	movs	r2, #34	@ 0x22
 8004648:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004650:	2b00      	cmp	r3, #0
 8004652:	d028      	beq.n	80046a6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004658:	4a3e      	ldr	r2, [pc, #248]	@ (8004754 <UART_Start_Receive_DMA+0x134>)
 800465a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004660:	4a3d      	ldr	r2, [pc, #244]	@ (8004758 <UART_Start_Receive_DMA+0x138>)
 8004662:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004668:	4a3c      	ldr	r2, [pc, #240]	@ (800475c <UART_Start_Receive_DMA+0x13c>)
 800466a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004670:	2200      	movs	r2, #0
 8004672:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3324      	adds	r3, #36	@ 0x24
 800467e:	4619      	mov	r1, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004684:	461a      	mov	r2, r3
 8004686:	88fb      	ldrh	r3, [r7, #6]
 8004688:	f7fc fe70 	bl	800136c <HAL_DMA_Start_IT>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d009      	beq.n	80046a6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2210      	movs	r2, #16
 8004696:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2220      	movs	r2, #32
 800469e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e051      	b.n	800474a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d018      	beq.n	80046e0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046b6:	e853 3f00 	ldrex	r3, [r3]
 80046ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	461a      	mov	r2, r3
 80046ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046ce:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80046d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046d4:	e841 2300 	strex	r3, r2, [r1]
 80046d8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80046da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e6      	bne.n	80046ae <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3308      	adds	r3, #8
 80046e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ea:	e853 3f00 	ldrex	r3, [r3]
 80046ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3308      	adds	r3, #8
 80046fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004700:	637a      	str	r2, [r7, #52]	@ 0x34
 8004702:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004704:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004706:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004708:	e841 2300 	strex	r3, r2, [r1]
 800470c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800470e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1e5      	bne.n	80046e0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3308      	adds	r3, #8
 800471a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	e853 3f00 	ldrex	r3, [r3]
 8004722:	613b      	str	r3, [r7, #16]
   return(result);
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800472a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3308      	adds	r3, #8
 8004732:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004734:	623a      	str	r2, [r7, #32]
 8004736:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004738:	69f9      	ldr	r1, [r7, #28]
 800473a:	6a3a      	ldr	r2, [r7, #32]
 800473c:	e841 2300 	strex	r3, r2, [r1]
 8004740:	61bb      	str	r3, [r7, #24]
   return(result);
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e5      	bne.n	8004714 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3758      	adds	r7, #88	@ 0x58
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	08004875 	.word	0x08004875
 8004758:	080049a1 	.word	0x080049a1
 800475c:	080049df 	.word	0x080049df

08004760 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004760:	b480      	push	{r7}
 8004762:	b089      	sub	sp, #36	@ 0x24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	e853 3f00 	ldrex	r3, [r3]
 8004774:	60bb      	str	r3, [r7, #8]
   return(result);
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	461a      	mov	r2, r3
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	61bb      	str	r3, [r7, #24]
 8004788:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478a:	6979      	ldr	r1, [r7, #20]
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	e841 2300 	strex	r3, r2, [r1]
 8004792:	613b      	str	r3, [r7, #16]
   return(result);
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1e6      	bne.n	8004768 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80047a0:	bf00      	nop
 80047a2:	3724      	adds	r7, #36	@ 0x24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b095      	sub	sp, #84	@ 0x54
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047bc:	e853 3f00 	ldrex	r3, [r3]
 80047c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80047d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047da:	e841 2300 	strex	r3, r2, [r1]
 80047de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1e6      	bne.n	80047b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3308      	adds	r3, #8
 80047ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	e853 3f00 	ldrex	r3, [r3]
 80047f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	f023 0301 	bic.w	r3, r3, #1
 80047fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3308      	adds	r3, #8
 8004804:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004806:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004808:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800480c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1e5      	bne.n	80047e6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800481e:	2b01      	cmp	r3, #1
 8004820:	d118      	bne.n	8004854 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	e853 3f00 	ldrex	r3, [r3]
 800482e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f023 0310 	bic.w	r3, r3, #16
 8004836:	647b      	str	r3, [r7, #68]	@ 0x44
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004844:	6979      	ldr	r1, [r7, #20]
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	e841 2300 	strex	r3, r2, [r1]
 800484c:	613b      	str	r3, [r7, #16]
   return(result);
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1e6      	bne.n	8004822 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004868:	bf00      	nop
 800486a:	3754      	adds	r7, #84	@ 0x54
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b09c      	sub	sp, #112	@ 0x70
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004880:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b00      	cmp	r3, #0
 800488e:	d171      	bne.n	8004974 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8004890:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004892:	2200      	movs	r2, #0
 8004894:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004898:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048a0:	e853 3f00 	ldrex	r3, [r3]
 80048a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	461a      	mov	r2, r3
 80048b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e6      	bne.n	8004898 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3308      	adds	r3, #8
 80048d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048dc:	f023 0301 	bic.w	r3, r3, #1
 80048e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80048e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3308      	adds	r3, #8
 80048e8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80048ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80048ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1e5      	bne.n	80048ca <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3308      	adds	r3, #8
 8004904:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004908:	e853 3f00 	ldrex	r3, [r3]
 800490c:	623b      	str	r3, [r7, #32]
   return(result);
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004914:	663b      	str	r3, [r7, #96]	@ 0x60
 8004916:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3308      	adds	r3, #8
 800491c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800491e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004920:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004922:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004926:	e841 2300 	strex	r3, r2, [r1]
 800492a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800492c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1e5      	bne.n	80048fe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004932:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004934:	2220      	movs	r2, #32
 8004936:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800493a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800493c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800493e:	2b01      	cmp	r3, #1
 8004940:	d118      	bne.n	8004974 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004942:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	e853 3f00 	ldrex	r3, [r3]
 800494e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0310 	bic.w	r3, r3, #16
 8004956:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004958:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	461a      	mov	r2, r3
 800495e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004960:	61fb      	str	r3, [r7, #28]
 8004962:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004964:	69b9      	ldr	r1, [r7, #24]
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	e841 2300 	strex	r3, r2, [r1]
 800496c:	617b      	str	r3, [r7, #20]
   return(result);
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1e6      	bne.n	8004942 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004976:	2200      	movs	r2, #0
 8004978:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800497a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800497c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800497e:	2b01      	cmp	r3, #1
 8004980:	d107      	bne.n	8004992 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004982:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004984:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004988:	4619      	mov	r1, r3
 800498a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800498c:	f7fb ff64 	bl	8000858 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004990:	e002      	b.n	8004998 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004992:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004994:	f7ff f8f0 	bl	8003b78 <HAL_UART_RxCpltCallback>
}
 8004998:	bf00      	nop
 800499a:	3770      	adds	r7, #112	@ 0x70
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ac:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2201      	movs	r2, #1
 80049b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d109      	bne.n	80049d0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80049c2:	085b      	lsrs	r3, r3, #1
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	4619      	mov	r1, r3
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f7fb ff45 	bl	8000858 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049ce:	e002      	b.n	80049d6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f7ff f8db 	bl	8003b8c <HAL_UART_RxHalfCpltCallback>
}
 80049d6:	bf00      	nop
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b086      	sub	sp, #24
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049f0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a04:	2b80      	cmp	r3, #128	@ 0x80
 8004a06:	d109      	bne.n	8004a1c <UART_DMAError+0x3e>
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	2b21      	cmp	r3, #33	@ 0x21
 8004a0c:	d106      	bne.n	8004a1c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8004a16:	6978      	ldr	r0, [r7, #20]
 8004a18:	f7ff fea2 	bl	8004760 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a26:	2b40      	cmp	r3, #64	@ 0x40
 8004a28:	d109      	bne.n	8004a3e <UART_DMAError+0x60>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b22      	cmp	r3, #34	@ 0x22
 8004a2e:	d106      	bne.n	8004a3e <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004a38:	6978      	ldr	r0, [r7, #20]
 8004a3a:	f7ff feb7 	bl	80047ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a44:	f043 0210 	orr.w	r2, r3, #16
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a4e:	6978      	ldr	r0, [r7, #20]
 8004a50:	f7ff f8a6 	bl	8003ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a54:	bf00      	nop
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f7ff f890 	bl	8003ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a80:	bf00      	nop
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b088      	sub	sp, #32
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	e853 3f00 	ldrex	r3, [r3]
 8004a9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004aa4:	61fb      	str	r3, [r7, #28]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	61bb      	str	r3, [r7, #24]
 8004ab0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab2:	6979      	ldr	r1, [r7, #20]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	e841 2300 	strex	r3, r2, [r1]
 8004aba:	613b      	str	r3, [r7, #16]
   return(result);
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1e6      	bne.n	8004a90 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7ff f848 	bl	8003b64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ad4:	bf00      	nop
 8004ad6:	3720      	adds	r7, #32
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b09c      	sub	sp, #112	@ 0x70
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004aea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004af4:	2b22      	cmp	r3, #34	@ 0x22
 8004af6:	f040 80be 	bne.w	8004c76 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004b00:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004b04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004b08:	b2d9      	uxtb	r1, r3
 8004b0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b14:	400a      	ands	r2, r1
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f040 80a3 	bne.w	8004c8a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b4c:	e853 3f00 	ldrex	r3, [r3]
 8004b50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b6a:	e841 2300 	strex	r3, r2, [r1]
 8004b6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1e6      	bne.n	8004b44 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b80:	e853 3f00 	ldrex	r3, [r3]
 8004b84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b88:	f023 0301 	bic.w	r3, r3, #1
 8004b8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3308      	adds	r3, #8
 8004b94:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004b96:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b9e:	e841 2300 	strex	r3, r2, [r1]
 8004ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1e5      	bne.n	8004b76 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a34      	ldr	r2, [pc, #208]	@ (8004c94 <UART_RxISR_8BIT+0x1b8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d01f      	beq.n	8004c08 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d018      	beq.n	8004c08 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bde:	e853 3f00 	ldrex	r3, [r3]
 8004be2:	623b      	str	r3, [r7, #32]
   return(result);
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bea:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bfc:	e841 2300 	strex	r3, r2, [r1]
 8004c00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1e6      	bne.n	8004bd6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d12e      	bne.n	8004c6e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	e853 3f00 	ldrex	r3, [r3]
 8004c22:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f023 0310 	bic.w	r3, r3, #16
 8004c2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	461a      	mov	r2, r3
 8004c32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c34:	61fb      	str	r3, [r7, #28]
 8004c36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c38:	69b9      	ldr	r1, [r7, #24]
 8004c3a:	69fa      	ldr	r2, [r7, #28]
 8004c3c:	e841 2300 	strex	r3, r2, [r1]
 8004c40:	617b      	str	r3, [r7, #20]
   return(result);
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1e6      	bne.n	8004c16 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f003 0310 	and.w	r3, r3, #16
 8004c52:	2b10      	cmp	r3, #16
 8004c54:	d103      	bne.n	8004c5e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2210      	movs	r2, #16
 8004c5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004c64:	4619      	mov	r1, r3
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fb fdf6 	bl	8000858 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c6c:	e00d      	b.n	8004c8a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fe ff82 	bl	8003b78 <HAL_UART_RxCpltCallback>
}
 8004c74:	e009      	b.n	8004c8a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	8b1b      	ldrh	r3, [r3, #24]
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 0208 	orr.w	r2, r2, #8
 8004c86:	b292      	uxth	r2, r2
 8004c88:	831a      	strh	r2, [r3, #24]
}
 8004c8a:	bf00      	nop
 8004c8c:	3770      	adds	r7, #112	@ 0x70
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40008000 	.word	0x40008000

08004c98 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b09c      	sub	sp, #112	@ 0x70
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ca6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cb0:	2b22      	cmp	r3, #34	@ 0x22
 8004cb2:	f040 80be 	bne.w	8004e32 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004cbc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004cc6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004cca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004cce:	4013      	ands	r3, r2
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004cd4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cda:	1c9a      	adds	r2, r3, #2
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f040 80a3 	bne.w	8004e46 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d08:	e853 3f00 	ldrex	r3, [r3]
 8004d0c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004d0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d14:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d20:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d22:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004d24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d26:	e841 2300 	strex	r3, r2, [r1]
 8004d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004d2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1e6      	bne.n	8004d00 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3308      	adds	r3, #8
 8004d38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d44:	f023 0301 	bic.w	r3, r3, #1
 8004d48:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3308      	adds	r3, #8
 8004d50:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004d52:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e5      	bne.n	8004d32 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a34      	ldr	r2, [pc, #208]	@ (8004e50 <UART_RxISR_16BIT+0x1b8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d01f      	beq.n	8004dc4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d018      	beq.n	8004dc4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	e853 3f00 	ldrex	r3, [r3]
 8004d9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004da6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004db2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004db6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004db8:	e841 2300 	strex	r3, r2, [r1]
 8004dbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1e6      	bne.n	8004d92 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d12e      	bne.n	8004e2a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	e853 3f00 	ldrex	r3, [r3]
 8004dde:	60bb      	str	r3, [r7, #8]
   return(result);
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f023 0310 	bic.w	r3, r3, #16
 8004de6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	461a      	mov	r2, r3
 8004dee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004df0:	61bb      	str	r3, [r7, #24]
 8004df2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df4:	6979      	ldr	r1, [r7, #20]
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	e841 2300 	strex	r3, r2, [r1]
 8004dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e6      	bne.n	8004dd2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	f003 0310 	and.w	r3, r3, #16
 8004e0e:	2b10      	cmp	r3, #16
 8004e10:	d103      	bne.n	8004e1a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2210      	movs	r2, #16
 8004e18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004e20:	4619      	mov	r1, r3
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fb fd18 	bl	8000858 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e28:	e00d      	b.n	8004e46 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fe fea4 	bl	8003b78 <HAL_UART_RxCpltCallback>
}
 8004e30:	e009      	b.n	8004e46 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	8b1b      	ldrh	r3, [r3, #24]
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0208 	orr.w	r2, r2, #8
 8004e42:	b292      	uxth	r2, r2
 8004e44:	831a      	strh	r2, [r3, #24]
}
 8004e46:	bf00      	nop
 8004e48:	3770      	adds	r7, #112	@ 0x70
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40008000 	.word	0x40008000

08004e54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08c      	sub	sp, #48	@ 0x30
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	4613      	mov	r3, r2
 8004e74:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e7c:	2b20      	cmp	r3, #32
 8004e7e:	d142      	bne.n	8004f06 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8004e86:	88fb      	ldrh	r3, [r7, #6]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e03b      	b.n	8004f08 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2201      	movs	r2, #1
 8004e94:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f7ff fbbc 	bl	8004620 <UART_Start_Receive_DMA>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004eae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d124      	bne.n	8004f00 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d11d      	bne.n	8004efa <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2210      	movs	r2, #16
 8004ec4:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	e853 3f00 	ldrex	r3, [r3]
 8004ed2:	617b      	str	r3, [r7, #20]
   return(result);
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f043 0310 	orr.w	r3, r3, #16
 8004eda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ee6:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee8:	6a39      	ldr	r1, [r7, #32]
 8004eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eec:	e841 2300 	strex	r3, r2, [r1]
 8004ef0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1e6      	bne.n	8004ec6 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8004ef8:	e002      	b.n	8004f00 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004f00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004f04:	e000      	b.n	8004f08 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004f06:	2302      	movs	r3, #2
  }
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3730      	adds	r7, #48	@ 0x30
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <sniprintf>:
 8004f10:	b40c      	push	{r2, r3}
 8004f12:	b530      	push	{r4, r5, lr}
 8004f14:	4b18      	ldr	r3, [pc, #96]	@ (8004f78 <sniprintf+0x68>)
 8004f16:	1e0c      	subs	r4, r1, #0
 8004f18:	681d      	ldr	r5, [r3, #0]
 8004f1a:	b09d      	sub	sp, #116	@ 0x74
 8004f1c:	da08      	bge.n	8004f30 <sniprintf+0x20>
 8004f1e:	238b      	movs	r3, #139	@ 0x8b
 8004f20:	602b      	str	r3, [r5, #0]
 8004f22:	f04f 30ff 	mov.w	r0, #4294967295
 8004f26:	b01d      	add	sp, #116	@ 0x74
 8004f28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f2c:	b002      	add	sp, #8
 8004f2e:	4770      	bx	lr
 8004f30:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004f34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004f3e:	bf14      	ite	ne
 8004f40:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004f44:	4623      	moveq	r3, r4
 8004f46:	9304      	str	r3, [sp, #16]
 8004f48:	9307      	str	r3, [sp, #28]
 8004f4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f4e:	9002      	str	r0, [sp, #8]
 8004f50:	9006      	str	r0, [sp, #24]
 8004f52:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004f56:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004f58:	ab21      	add	r3, sp, #132	@ 0x84
 8004f5a:	a902      	add	r1, sp, #8
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	9301      	str	r3, [sp, #4]
 8004f60:	f000 f9b6 	bl	80052d0 <_svfiprintf_r>
 8004f64:	1c43      	adds	r3, r0, #1
 8004f66:	bfbc      	itt	lt
 8004f68:	238b      	movlt	r3, #139	@ 0x8b
 8004f6a:	602b      	strlt	r3, [r5, #0]
 8004f6c:	2c00      	cmp	r4, #0
 8004f6e:	d0da      	beq.n	8004f26 <sniprintf+0x16>
 8004f70:	9b02      	ldr	r3, [sp, #8]
 8004f72:	2200      	movs	r2, #0
 8004f74:	701a      	strb	r2, [r3, #0]
 8004f76:	e7d6      	b.n	8004f26 <sniprintf+0x16>
 8004f78:	2000009c 	.word	0x2000009c

08004f7c <memset>:
 8004f7c:	4402      	add	r2, r0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d100      	bne.n	8004f86 <memset+0xa>
 8004f84:	4770      	bx	lr
 8004f86:	f803 1b01 	strb.w	r1, [r3], #1
 8004f8a:	e7f9      	b.n	8004f80 <memset+0x4>

08004f8c <strcat>:
 8004f8c:	b510      	push	{r4, lr}
 8004f8e:	4602      	mov	r2, r0
 8004f90:	7814      	ldrb	r4, [r2, #0]
 8004f92:	4613      	mov	r3, r2
 8004f94:	3201      	adds	r2, #1
 8004f96:	2c00      	cmp	r4, #0
 8004f98:	d1fa      	bne.n	8004f90 <strcat+0x4>
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fa0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fa4:	2a00      	cmp	r2, #0
 8004fa6:	d1f9      	bne.n	8004f9c <strcat+0x10>
 8004fa8:	bd10      	pop	{r4, pc}

08004faa <strncpy>:
 8004faa:	b510      	push	{r4, lr}
 8004fac:	3901      	subs	r1, #1
 8004fae:	4603      	mov	r3, r0
 8004fb0:	b132      	cbz	r2, 8004fc0 <strncpy+0x16>
 8004fb2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004fb6:	f803 4b01 	strb.w	r4, [r3], #1
 8004fba:	3a01      	subs	r2, #1
 8004fbc:	2c00      	cmp	r4, #0
 8004fbe:	d1f7      	bne.n	8004fb0 <strncpy+0x6>
 8004fc0:	441a      	add	r2, r3
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d100      	bne.n	8004fca <strncpy+0x20>
 8004fc8:	bd10      	pop	{r4, pc}
 8004fca:	f803 1b01 	strb.w	r1, [r3], #1
 8004fce:	e7f9      	b.n	8004fc4 <strncpy+0x1a>

08004fd0 <__errno>:
 8004fd0:	4b01      	ldr	r3, [pc, #4]	@ (8004fd8 <__errno+0x8>)
 8004fd2:	6818      	ldr	r0, [r3, #0]
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	2000009c 	.word	0x2000009c

08004fdc <__libc_init_array>:
 8004fdc:	b570      	push	{r4, r5, r6, lr}
 8004fde:	4d0d      	ldr	r5, [pc, #52]	@ (8005014 <__libc_init_array+0x38>)
 8004fe0:	4c0d      	ldr	r4, [pc, #52]	@ (8005018 <__libc_init_array+0x3c>)
 8004fe2:	1b64      	subs	r4, r4, r5
 8004fe4:	10a4      	asrs	r4, r4, #2
 8004fe6:	2600      	movs	r6, #0
 8004fe8:	42a6      	cmp	r6, r4
 8004fea:	d109      	bne.n	8005000 <__libc_init_array+0x24>
 8004fec:	4d0b      	ldr	r5, [pc, #44]	@ (800501c <__libc_init_array+0x40>)
 8004fee:	4c0c      	ldr	r4, [pc, #48]	@ (8005020 <__libc_init_array+0x44>)
 8004ff0:	f000 fc64 	bl	80058bc <_init>
 8004ff4:	1b64      	subs	r4, r4, r5
 8004ff6:	10a4      	asrs	r4, r4, #2
 8004ff8:	2600      	movs	r6, #0
 8004ffa:	42a6      	cmp	r6, r4
 8004ffc:	d105      	bne.n	800500a <__libc_init_array+0x2e>
 8004ffe:	bd70      	pop	{r4, r5, r6, pc}
 8005000:	f855 3b04 	ldr.w	r3, [r5], #4
 8005004:	4798      	blx	r3
 8005006:	3601      	adds	r6, #1
 8005008:	e7ee      	b.n	8004fe8 <__libc_init_array+0xc>
 800500a:	f855 3b04 	ldr.w	r3, [r5], #4
 800500e:	4798      	blx	r3
 8005010:	3601      	adds	r6, #1
 8005012:	e7f2      	b.n	8004ffa <__libc_init_array+0x1e>
 8005014:	08005a70 	.word	0x08005a70
 8005018:	08005a70 	.word	0x08005a70
 800501c:	08005a70 	.word	0x08005a70
 8005020:	08005a74 	.word	0x08005a74

08005024 <__retarget_lock_acquire_recursive>:
 8005024:	4770      	bx	lr

08005026 <__retarget_lock_release_recursive>:
 8005026:	4770      	bx	lr

08005028 <_free_r>:
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	4605      	mov	r5, r0
 800502c:	2900      	cmp	r1, #0
 800502e:	d041      	beq.n	80050b4 <_free_r+0x8c>
 8005030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005034:	1f0c      	subs	r4, r1, #4
 8005036:	2b00      	cmp	r3, #0
 8005038:	bfb8      	it	lt
 800503a:	18e4      	addlt	r4, r4, r3
 800503c:	f000 f8e0 	bl	8005200 <__malloc_lock>
 8005040:	4a1d      	ldr	r2, [pc, #116]	@ (80050b8 <_free_r+0x90>)
 8005042:	6813      	ldr	r3, [r2, #0]
 8005044:	b933      	cbnz	r3, 8005054 <_free_r+0x2c>
 8005046:	6063      	str	r3, [r4, #4]
 8005048:	6014      	str	r4, [r2, #0]
 800504a:	4628      	mov	r0, r5
 800504c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005050:	f000 b8dc 	b.w	800520c <__malloc_unlock>
 8005054:	42a3      	cmp	r3, r4
 8005056:	d908      	bls.n	800506a <_free_r+0x42>
 8005058:	6820      	ldr	r0, [r4, #0]
 800505a:	1821      	adds	r1, r4, r0
 800505c:	428b      	cmp	r3, r1
 800505e:	bf01      	itttt	eq
 8005060:	6819      	ldreq	r1, [r3, #0]
 8005062:	685b      	ldreq	r3, [r3, #4]
 8005064:	1809      	addeq	r1, r1, r0
 8005066:	6021      	streq	r1, [r4, #0]
 8005068:	e7ed      	b.n	8005046 <_free_r+0x1e>
 800506a:	461a      	mov	r2, r3
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	b10b      	cbz	r3, 8005074 <_free_r+0x4c>
 8005070:	42a3      	cmp	r3, r4
 8005072:	d9fa      	bls.n	800506a <_free_r+0x42>
 8005074:	6811      	ldr	r1, [r2, #0]
 8005076:	1850      	adds	r0, r2, r1
 8005078:	42a0      	cmp	r0, r4
 800507a:	d10b      	bne.n	8005094 <_free_r+0x6c>
 800507c:	6820      	ldr	r0, [r4, #0]
 800507e:	4401      	add	r1, r0
 8005080:	1850      	adds	r0, r2, r1
 8005082:	4283      	cmp	r3, r0
 8005084:	6011      	str	r1, [r2, #0]
 8005086:	d1e0      	bne.n	800504a <_free_r+0x22>
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	6053      	str	r3, [r2, #4]
 800508e:	4408      	add	r0, r1
 8005090:	6010      	str	r0, [r2, #0]
 8005092:	e7da      	b.n	800504a <_free_r+0x22>
 8005094:	d902      	bls.n	800509c <_free_r+0x74>
 8005096:	230c      	movs	r3, #12
 8005098:	602b      	str	r3, [r5, #0]
 800509a:	e7d6      	b.n	800504a <_free_r+0x22>
 800509c:	6820      	ldr	r0, [r4, #0]
 800509e:	1821      	adds	r1, r4, r0
 80050a0:	428b      	cmp	r3, r1
 80050a2:	bf04      	itt	eq
 80050a4:	6819      	ldreq	r1, [r3, #0]
 80050a6:	685b      	ldreq	r3, [r3, #4]
 80050a8:	6063      	str	r3, [r4, #4]
 80050aa:	bf04      	itt	eq
 80050ac:	1809      	addeq	r1, r1, r0
 80050ae:	6021      	streq	r1, [r4, #0]
 80050b0:	6054      	str	r4, [r2, #4]
 80050b2:	e7ca      	b.n	800504a <_free_r+0x22>
 80050b4:	bd38      	pop	{r3, r4, r5, pc}
 80050b6:	bf00      	nop
 80050b8:	200004bc 	.word	0x200004bc

080050bc <sbrk_aligned>:
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	4e0f      	ldr	r6, [pc, #60]	@ (80050fc <sbrk_aligned+0x40>)
 80050c0:	460c      	mov	r4, r1
 80050c2:	6831      	ldr	r1, [r6, #0]
 80050c4:	4605      	mov	r5, r0
 80050c6:	b911      	cbnz	r1, 80050ce <sbrk_aligned+0x12>
 80050c8:	f000 fba4 	bl	8005814 <_sbrk_r>
 80050cc:	6030      	str	r0, [r6, #0]
 80050ce:	4621      	mov	r1, r4
 80050d0:	4628      	mov	r0, r5
 80050d2:	f000 fb9f 	bl	8005814 <_sbrk_r>
 80050d6:	1c43      	adds	r3, r0, #1
 80050d8:	d103      	bne.n	80050e2 <sbrk_aligned+0x26>
 80050da:	f04f 34ff 	mov.w	r4, #4294967295
 80050de:	4620      	mov	r0, r4
 80050e0:	bd70      	pop	{r4, r5, r6, pc}
 80050e2:	1cc4      	adds	r4, r0, #3
 80050e4:	f024 0403 	bic.w	r4, r4, #3
 80050e8:	42a0      	cmp	r0, r4
 80050ea:	d0f8      	beq.n	80050de <sbrk_aligned+0x22>
 80050ec:	1a21      	subs	r1, r4, r0
 80050ee:	4628      	mov	r0, r5
 80050f0:	f000 fb90 	bl	8005814 <_sbrk_r>
 80050f4:	3001      	adds	r0, #1
 80050f6:	d1f2      	bne.n	80050de <sbrk_aligned+0x22>
 80050f8:	e7ef      	b.n	80050da <sbrk_aligned+0x1e>
 80050fa:	bf00      	nop
 80050fc:	200004b8 	.word	0x200004b8

08005100 <_malloc_r>:
 8005100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005104:	1ccd      	adds	r5, r1, #3
 8005106:	f025 0503 	bic.w	r5, r5, #3
 800510a:	3508      	adds	r5, #8
 800510c:	2d0c      	cmp	r5, #12
 800510e:	bf38      	it	cc
 8005110:	250c      	movcc	r5, #12
 8005112:	2d00      	cmp	r5, #0
 8005114:	4606      	mov	r6, r0
 8005116:	db01      	blt.n	800511c <_malloc_r+0x1c>
 8005118:	42a9      	cmp	r1, r5
 800511a:	d904      	bls.n	8005126 <_malloc_r+0x26>
 800511c:	230c      	movs	r3, #12
 800511e:	6033      	str	r3, [r6, #0]
 8005120:	2000      	movs	r0, #0
 8005122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005126:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80051fc <_malloc_r+0xfc>
 800512a:	f000 f869 	bl	8005200 <__malloc_lock>
 800512e:	f8d8 3000 	ldr.w	r3, [r8]
 8005132:	461c      	mov	r4, r3
 8005134:	bb44      	cbnz	r4, 8005188 <_malloc_r+0x88>
 8005136:	4629      	mov	r1, r5
 8005138:	4630      	mov	r0, r6
 800513a:	f7ff ffbf 	bl	80050bc <sbrk_aligned>
 800513e:	1c43      	adds	r3, r0, #1
 8005140:	4604      	mov	r4, r0
 8005142:	d158      	bne.n	80051f6 <_malloc_r+0xf6>
 8005144:	f8d8 4000 	ldr.w	r4, [r8]
 8005148:	4627      	mov	r7, r4
 800514a:	2f00      	cmp	r7, #0
 800514c:	d143      	bne.n	80051d6 <_malloc_r+0xd6>
 800514e:	2c00      	cmp	r4, #0
 8005150:	d04b      	beq.n	80051ea <_malloc_r+0xea>
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	4639      	mov	r1, r7
 8005156:	4630      	mov	r0, r6
 8005158:	eb04 0903 	add.w	r9, r4, r3
 800515c:	f000 fb5a 	bl	8005814 <_sbrk_r>
 8005160:	4581      	cmp	r9, r0
 8005162:	d142      	bne.n	80051ea <_malloc_r+0xea>
 8005164:	6821      	ldr	r1, [r4, #0]
 8005166:	1a6d      	subs	r5, r5, r1
 8005168:	4629      	mov	r1, r5
 800516a:	4630      	mov	r0, r6
 800516c:	f7ff ffa6 	bl	80050bc <sbrk_aligned>
 8005170:	3001      	adds	r0, #1
 8005172:	d03a      	beq.n	80051ea <_malloc_r+0xea>
 8005174:	6823      	ldr	r3, [r4, #0]
 8005176:	442b      	add	r3, r5
 8005178:	6023      	str	r3, [r4, #0]
 800517a:	f8d8 3000 	ldr.w	r3, [r8]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	bb62      	cbnz	r2, 80051dc <_malloc_r+0xdc>
 8005182:	f8c8 7000 	str.w	r7, [r8]
 8005186:	e00f      	b.n	80051a8 <_malloc_r+0xa8>
 8005188:	6822      	ldr	r2, [r4, #0]
 800518a:	1b52      	subs	r2, r2, r5
 800518c:	d420      	bmi.n	80051d0 <_malloc_r+0xd0>
 800518e:	2a0b      	cmp	r2, #11
 8005190:	d917      	bls.n	80051c2 <_malloc_r+0xc2>
 8005192:	1961      	adds	r1, r4, r5
 8005194:	42a3      	cmp	r3, r4
 8005196:	6025      	str	r5, [r4, #0]
 8005198:	bf18      	it	ne
 800519a:	6059      	strne	r1, [r3, #4]
 800519c:	6863      	ldr	r3, [r4, #4]
 800519e:	bf08      	it	eq
 80051a0:	f8c8 1000 	streq.w	r1, [r8]
 80051a4:	5162      	str	r2, [r4, r5]
 80051a6:	604b      	str	r3, [r1, #4]
 80051a8:	4630      	mov	r0, r6
 80051aa:	f000 f82f 	bl	800520c <__malloc_unlock>
 80051ae:	f104 000b 	add.w	r0, r4, #11
 80051b2:	1d23      	adds	r3, r4, #4
 80051b4:	f020 0007 	bic.w	r0, r0, #7
 80051b8:	1ac2      	subs	r2, r0, r3
 80051ba:	bf1c      	itt	ne
 80051bc:	1a1b      	subne	r3, r3, r0
 80051be:	50a3      	strne	r3, [r4, r2]
 80051c0:	e7af      	b.n	8005122 <_malloc_r+0x22>
 80051c2:	6862      	ldr	r2, [r4, #4]
 80051c4:	42a3      	cmp	r3, r4
 80051c6:	bf0c      	ite	eq
 80051c8:	f8c8 2000 	streq.w	r2, [r8]
 80051cc:	605a      	strne	r2, [r3, #4]
 80051ce:	e7eb      	b.n	80051a8 <_malloc_r+0xa8>
 80051d0:	4623      	mov	r3, r4
 80051d2:	6864      	ldr	r4, [r4, #4]
 80051d4:	e7ae      	b.n	8005134 <_malloc_r+0x34>
 80051d6:	463c      	mov	r4, r7
 80051d8:	687f      	ldr	r7, [r7, #4]
 80051da:	e7b6      	b.n	800514a <_malloc_r+0x4a>
 80051dc:	461a      	mov	r2, r3
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	42a3      	cmp	r3, r4
 80051e2:	d1fb      	bne.n	80051dc <_malloc_r+0xdc>
 80051e4:	2300      	movs	r3, #0
 80051e6:	6053      	str	r3, [r2, #4]
 80051e8:	e7de      	b.n	80051a8 <_malloc_r+0xa8>
 80051ea:	230c      	movs	r3, #12
 80051ec:	6033      	str	r3, [r6, #0]
 80051ee:	4630      	mov	r0, r6
 80051f0:	f000 f80c 	bl	800520c <__malloc_unlock>
 80051f4:	e794      	b.n	8005120 <_malloc_r+0x20>
 80051f6:	6005      	str	r5, [r0, #0]
 80051f8:	e7d6      	b.n	80051a8 <_malloc_r+0xa8>
 80051fa:	bf00      	nop
 80051fc:	200004bc 	.word	0x200004bc

08005200 <__malloc_lock>:
 8005200:	4801      	ldr	r0, [pc, #4]	@ (8005208 <__malloc_lock+0x8>)
 8005202:	f7ff bf0f 	b.w	8005024 <__retarget_lock_acquire_recursive>
 8005206:	bf00      	nop
 8005208:	200004b4 	.word	0x200004b4

0800520c <__malloc_unlock>:
 800520c:	4801      	ldr	r0, [pc, #4]	@ (8005214 <__malloc_unlock+0x8>)
 800520e:	f7ff bf0a 	b.w	8005026 <__retarget_lock_release_recursive>
 8005212:	bf00      	nop
 8005214:	200004b4 	.word	0x200004b4

08005218 <__ssputs_r>:
 8005218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800521c:	688e      	ldr	r6, [r1, #8]
 800521e:	461f      	mov	r7, r3
 8005220:	42be      	cmp	r6, r7
 8005222:	680b      	ldr	r3, [r1, #0]
 8005224:	4682      	mov	sl, r0
 8005226:	460c      	mov	r4, r1
 8005228:	4690      	mov	r8, r2
 800522a:	d82d      	bhi.n	8005288 <__ssputs_r+0x70>
 800522c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005230:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005234:	d026      	beq.n	8005284 <__ssputs_r+0x6c>
 8005236:	6965      	ldr	r5, [r4, #20]
 8005238:	6909      	ldr	r1, [r1, #16]
 800523a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800523e:	eba3 0901 	sub.w	r9, r3, r1
 8005242:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005246:	1c7b      	adds	r3, r7, #1
 8005248:	444b      	add	r3, r9
 800524a:	106d      	asrs	r5, r5, #1
 800524c:	429d      	cmp	r5, r3
 800524e:	bf38      	it	cc
 8005250:	461d      	movcc	r5, r3
 8005252:	0553      	lsls	r3, r2, #21
 8005254:	d527      	bpl.n	80052a6 <__ssputs_r+0x8e>
 8005256:	4629      	mov	r1, r5
 8005258:	f7ff ff52 	bl	8005100 <_malloc_r>
 800525c:	4606      	mov	r6, r0
 800525e:	b360      	cbz	r0, 80052ba <__ssputs_r+0xa2>
 8005260:	6921      	ldr	r1, [r4, #16]
 8005262:	464a      	mov	r2, r9
 8005264:	f000 fae6 	bl	8005834 <memcpy>
 8005268:	89a3      	ldrh	r3, [r4, #12]
 800526a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800526e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005272:	81a3      	strh	r3, [r4, #12]
 8005274:	6126      	str	r6, [r4, #16]
 8005276:	6165      	str	r5, [r4, #20]
 8005278:	444e      	add	r6, r9
 800527a:	eba5 0509 	sub.w	r5, r5, r9
 800527e:	6026      	str	r6, [r4, #0]
 8005280:	60a5      	str	r5, [r4, #8]
 8005282:	463e      	mov	r6, r7
 8005284:	42be      	cmp	r6, r7
 8005286:	d900      	bls.n	800528a <__ssputs_r+0x72>
 8005288:	463e      	mov	r6, r7
 800528a:	6820      	ldr	r0, [r4, #0]
 800528c:	4632      	mov	r2, r6
 800528e:	4641      	mov	r1, r8
 8005290:	f000 faa6 	bl	80057e0 <memmove>
 8005294:	68a3      	ldr	r3, [r4, #8]
 8005296:	1b9b      	subs	r3, r3, r6
 8005298:	60a3      	str	r3, [r4, #8]
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	4433      	add	r3, r6
 800529e:	6023      	str	r3, [r4, #0]
 80052a0:	2000      	movs	r0, #0
 80052a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a6:	462a      	mov	r2, r5
 80052a8:	f000 fad2 	bl	8005850 <_realloc_r>
 80052ac:	4606      	mov	r6, r0
 80052ae:	2800      	cmp	r0, #0
 80052b0:	d1e0      	bne.n	8005274 <__ssputs_r+0x5c>
 80052b2:	6921      	ldr	r1, [r4, #16]
 80052b4:	4650      	mov	r0, sl
 80052b6:	f7ff feb7 	bl	8005028 <_free_r>
 80052ba:	230c      	movs	r3, #12
 80052bc:	f8ca 3000 	str.w	r3, [sl]
 80052c0:	89a3      	ldrh	r3, [r4, #12]
 80052c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052c6:	81a3      	strh	r3, [r4, #12]
 80052c8:	f04f 30ff 	mov.w	r0, #4294967295
 80052cc:	e7e9      	b.n	80052a2 <__ssputs_r+0x8a>
	...

080052d0 <_svfiprintf_r>:
 80052d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d4:	4698      	mov	r8, r3
 80052d6:	898b      	ldrh	r3, [r1, #12]
 80052d8:	061b      	lsls	r3, r3, #24
 80052da:	b09d      	sub	sp, #116	@ 0x74
 80052dc:	4607      	mov	r7, r0
 80052de:	460d      	mov	r5, r1
 80052e0:	4614      	mov	r4, r2
 80052e2:	d510      	bpl.n	8005306 <_svfiprintf_r+0x36>
 80052e4:	690b      	ldr	r3, [r1, #16]
 80052e6:	b973      	cbnz	r3, 8005306 <_svfiprintf_r+0x36>
 80052e8:	2140      	movs	r1, #64	@ 0x40
 80052ea:	f7ff ff09 	bl	8005100 <_malloc_r>
 80052ee:	6028      	str	r0, [r5, #0]
 80052f0:	6128      	str	r0, [r5, #16]
 80052f2:	b930      	cbnz	r0, 8005302 <_svfiprintf_r+0x32>
 80052f4:	230c      	movs	r3, #12
 80052f6:	603b      	str	r3, [r7, #0]
 80052f8:	f04f 30ff 	mov.w	r0, #4294967295
 80052fc:	b01d      	add	sp, #116	@ 0x74
 80052fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005302:	2340      	movs	r3, #64	@ 0x40
 8005304:	616b      	str	r3, [r5, #20]
 8005306:	2300      	movs	r3, #0
 8005308:	9309      	str	r3, [sp, #36]	@ 0x24
 800530a:	2320      	movs	r3, #32
 800530c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005310:	f8cd 800c 	str.w	r8, [sp, #12]
 8005314:	2330      	movs	r3, #48	@ 0x30
 8005316:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80054b4 <_svfiprintf_r+0x1e4>
 800531a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800531e:	f04f 0901 	mov.w	r9, #1
 8005322:	4623      	mov	r3, r4
 8005324:	469a      	mov	sl, r3
 8005326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800532a:	b10a      	cbz	r2, 8005330 <_svfiprintf_r+0x60>
 800532c:	2a25      	cmp	r2, #37	@ 0x25
 800532e:	d1f9      	bne.n	8005324 <_svfiprintf_r+0x54>
 8005330:	ebba 0b04 	subs.w	fp, sl, r4
 8005334:	d00b      	beq.n	800534e <_svfiprintf_r+0x7e>
 8005336:	465b      	mov	r3, fp
 8005338:	4622      	mov	r2, r4
 800533a:	4629      	mov	r1, r5
 800533c:	4638      	mov	r0, r7
 800533e:	f7ff ff6b 	bl	8005218 <__ssputs_r>
 8005342:	3001      	adds	r0, #1
 8005344:	f000 80a7 	beq.w	8005496 <_svfiprintf_r+0x1c6>
 8005348:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800534a:	445a      	add	r2, fp
 800534c:	9209      	str	r2, [sp, #36]	@ 0x24
 800534e:	f89a 3000 	ldrb.w	r3, [sl]
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 809f 	beq.w	8005496 <_svfiprintf_r+0x1c6>
 8005358:	2300      	movs	r3, #0
 800535a:	f04f 32ff 	mov.w	r2, #4294967295
 800535e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005362:	f10a 0a01 	add.w	sl, sl, #1
 8005366:	9304      	str	r3, [sp, #16]
 8005368:	9307      	str	r3, [sp, #28]
 800536a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800536e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005370:	4654      	mov	r4, sl
 8005372:	2205      	movs	r2, #5
 8005374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005378:	484e      	ldr	r0, [pc, #312]	@ (80054b4 <_svfiprintf_r+0x1e4>)
 800537a:	f7fa ff31 	bl	80001e0 <memchr>
 800537e:	9a04      	ldr	r2, [sp, #16]
 8005380:	b9d8      	cbnz	r0, 80053ba <_svfiprintf_r+0xea>
 8005382:	06d0      	lsls	r0, r2, #27
 8005384:	bf44      	itt	mi
 8005386:	2320      	movmi	r3, #32
 8005388:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800538c:	0711      	lsls	r1, r2, #28
 800538e:	bf44      	itt	mi
 8005390:	232b      	movmi	r3, #43	@ 0x2b
 8005392:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005396:	f89a 3000 	ldrb.w	r3, [sl]
 800539a:	2b2a      	cmp	r3, #42	@ 0x2a
 800539c:	d015      	beq.n	80053ca <_svfiprintf_r+0xfa>
 800539e:	9a07      	ldr	r2, [sp, #28]
 80053a0:	4654      	mov	r4, sl
 80053a2:	2000      	movs	r0, #0
 80053a4:	f04f 0c0a 	mov.w	ip, #10
 80053a8:	4621      	mov	r1, r4
 80053aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053ae:	3b30      	subs	r3, #48	@ 0x30
 80053b0:	2b09      	cmp	r3, #9
 80053b2:	d94b      	bls.n	800544c <_svfiprintf_r+0x17c>
 80053b4:	b1b0      	cbz	r0, 80053e4 <_svfiprintf_r+0x114>
 80053b6:	9207      	str	r2, [sp, #28]
 80053b8:	e014      	b.n	80053e4 <_svfiprintf_r+0x114>
 80053ba:	eba0 0308 	sub.w	r3, r0, r8
 80053be:	fa09 f303 	lsl.w	r3, r9, r3
 80053c2:	4313      	orrs	r3, r2
 80053c4:	9304      	str	r3, [sp, #16]
 80053c6:	46a2      	mov	sl, r4
 80053c8:	e7d2      	b.n	8005370 <_svfiprintf_r+0xa0>
 80053ca:	9b03      	ldr	r3, [sp, #12]
 80053cc:	1d19      	adds	r1, r3, #4
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	9103      	str	r1, [sp, #12]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	bfbb      	ittet	lt
 80053d6:	425b      	neglt	r3, r3
 80053d8:	f042 0202 	orrlt.w	r2, r2, #2
 80053dc:	9307      	strge	r3, [sp, #28]
 80053de:	9307      	strlt	r3, [sp, #28]
 80053e0:	bfb8      	it	lt
 80053e2:	9204      	strlt	r2, [sp, #16]
 80053e4:	7823      	ldrb	r3, [r4, #0]
 80053e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80053e8:	d10a      	bne.n	8005400 <_svfiprintf_r+0x130>
 80053ea:	7863      	ldrb	r3, [r4, #1]
 80053ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80053ee:	d132      	bne.n	8005456 <_svfiprintf_r+0x186>
 80053f0:	9b03      	ldr	r3, [sp, #12]
 80053f2:	1d1a      	adds	r2, r3, #4
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	9203      	str	r2, [sp, #12]
 80053f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80053fc:	3402      	adds	r4, #2
 80053fe:	9305      	str	r3, [sp, #20]
 8005400:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80054c4 <_svfiprintf_r+0x1f4>
 8005404:	7821      	ldrb	r1, [r4, #0]
 8005406:	2203      	movs	r2, #3
 8005408:	4650      	mov	r0, sl
 800540a:	f7fa fee9 	bl	80001e0 <memchr>
 800540e:	b138      	cbz	r0, 8005420 <_svfiprintf_r+0x150>
 8005410:	9b04      	ldr	r3, [sp, #16]
 8005412:	eba0 000a 	sub.w	r0, r0, sl
 8005416:	2240      	movs	r2, #64	@ 0x40
 8005418:	4082      	lsls	r2, r0
 800541a:	4313      	orrs	r3, r2
 800541c:	3401      	adds	r4, #1
 800541e:	9304      	str	r3, [sp, #16]
 8005420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005424:	4824      	ldr	r0, [pc, #144]	@ (80054b8 <_svfiprintf_r+0x1e8>)
 8005426:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800542a:	2206      	movs	r2, #6
 800542c:	f7fa fed8 	bl	80001e0 <memchr>
 8005430:	2800      	cmp	r0, #0
 8005432:	d036      	beq.n	80054a2 <_svfiprintf_r+0x1d2>
 8005434:	4b21      	ldr	r3, [pc, #132]	@ (80054bc <_svfiprintf_r+0x1ec>)
 8005436:	bb1b      	cbnz	r3, 8005480 <_svfiprintf_r+0x1b0>
 8005438:	9b03      	ldr	r3, [sp, #12]
 800543a:	3307      	adds	r3, #7
 800543c:	f023 0307 	bic.w	r3, r3, #7
 8005440:	3308      	adds	r3, #8
 8005442:	9303      	str	r3, [sp, #12]
 8005444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005446:	4433      	add	r3, r6
 8005448:	9309      	str	r3, [sp, #36]	@ 0x24
 800544a:	e76a      	b.n	8005322 <_svfiprintf_r+0x52>
 800544c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005450:	460c      	mov	r4, r1
 8005452:	2001      	movs	r0, #1
 8005454:	e7a8      	b.n	80053a8 <_svfiprintf_r+0xd8>
 8005456:	2300      	movs	r3, #0
 8005458:	3401      	adds	r4, #1
 800545a:	9305      	str	r3, [sp, #20]
 800545c:	4619      	mov	r1, r3
 800545e:	f04f 0c0a 	mov.w	ip, #10
 8005462:	4620      	mov	r0, r4
 8005464:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005468:	3a30      	subs	r2, #48	@ 0x30
 800546a:	2a09      	cmp	r2, #9
 800546c:	d903      	bls.n	8005476 <_svfiprintf_r+0x1a6>
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0c6      	beq.n	8005400 <_svfiprintf_r+0x130>
 8005472:	9105      	str	r1, [sp, #20]
 8005474:	e7c4      	b.n	8005400 <_svfiprintf_r+0x130>
 8005476:	fb0c 2101 	mla	r1, ip, r1, r2
 800547a:	4604      	mov	r4, r0
 800547c:	2301      	movs	r3, #1
 800547e:	e7f0      	b.n	8005462 <_svfiprintf_r+0x192>
 8005480:	ab03      	add	r3, sp, #12
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	462a      	mov	r2, r5
 8005486:	4b0e      	ldr	r3, [pc, #56]	@ (80054c0 <_svfiprintf_r+0x1f0>)
 8005488:	a904      	add	r1, sp, #16
 800548a:	4638      	mov	r0, r7
 800548c:	f3af 8000 	nop.w
 8005490:	1c42      	adds	r2, r0, #1
 8005492:	4606      	mov	r6, r0
 8005494:	d1d6      	bne.n	8005444 <_svfiprintf_r+0x174>
 8005496:	89ab      	ldrh	r3, [r5, #12]
 8005498:	065b      	lsls	r3, r3, #25
 800549a:	f53f af2d 	bmi.w	80052f8 <_svfiprintf_r+0x28>
 800549e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054a0:	e72c      	b.n	80052fc <_svfiprintf_r+0x2c>
 80054a2:	ab03      	add	r3, sp, #12
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	462a      	mov	r2, r5
 80054a8:	4b05      	ldr	r3, [pc, #20]	@ (80054c0 <_svfiprintf_r+0x1f0>)
 80054aa:	a904      	add	r1, sp, #16
 80054ac:	4638      	mov	r0, r7
 80054ae:	f000 f879 	bl	80055a4 <_printf_i>
 80054b2:	e7ed      	b.n	8005490 <_svfiprintf_r+0x1c0>
 80054b4:	08005a34 	.word	0x08005a34
 80054b8:	08005a3e 	.word	0x08005a3e
 80054bc:	00000000 	.word	0x00000000
 80054c0:	08005219 	.word	0x08005219
 80054c4:	08005a3a 	.word	0x08005a3a

080054c8 <_printf_common>:
 80054c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054cc:	4616      	mov	r6, r2
 80054ce:	4698      	mov	r8, r3
 80054d0:	688a      	ldr	r2, [r1, #8]
 80054d2:	690b      	ldr	r3, [r1, #16]
 80054d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054d8:	4293      	cmp	r3, r2
 80054da:	bfb8      	it	lt
 80054dc:	4613      	movlt	r3, r2
 80054de:	6033      	str	r3, [r6, #0]
 80054e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054e4:	4607      	mov	r7, r0
 80054e6:	460c      	mov	r4, r1
 80054e8:	b10a      	cbz	r2, 80054ee <_printf_common+0x26>
 80054ea:	3301      	adds	r3, #1
 80054ec:	6033      	str	r3, [r6, #0]
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	0699      	lsls	r1, r3, #26
 80054f2:	bf42      	ittt	mi
 80054f4:	6833      	ldrmi	r3, [r6, #0]
 80054f6:	3302      	addmi	r3, #2
 80054f8:	6033      	strmi	r3, [r6, #0]
 80054fa:	6825      	ldr	r5, [r4, #0]
 80054fc:	f015 0506 	ands.w	r5, r5, #6
 8005500:	d106      	bne.n	8005510 <_printf_common+0x48>
 8005502:	f104 0a19 	add.w	sl, r4, #25
 8005506:	68e3      	ldr	r3, [r4, #12]
 8005508:	6832      	ldr	r2, [r6, #0]
 800550a:	1a9b      	subs	r3, r3, r2
 800550c:	42ab      	cmp	r3, r5
 800550e:	dc26      	bgt.n	800555e <_printf_common+0x96>
 8005510:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005514:	6822      	ldr	r2, [r4, #0]
 8005516:	3b00      	subs	r3, #0
 8005518:	bf18      	it	ne
 800551a:	2301      	movne	r3, #1
 800551c:	0692      	lsls	r2, r2, #26
 800551e:	d42b      	bmi.n	8005578 <_printf_common+0xb0>
 8005520:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005524:	4641      	mov	r1, r8
 8005526:	4638      	mov	r0, r7
 8005528:	47c8      	blx	r9
 800552a:	3001      	adds	r0, #1
 800552c:	d01e      	beq.n	800556c <_printf_common+0xa4>
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	6922      	ldr	r2, [r4, #16]
 8005532:	f003 0306 	and.w	r3, r3, #6
 8005536:	2b04      	cmp	r3, #4
 8005538:	bf02      	ittt	eq
 800553a:	68e5      	ldreq	r5, [r4, #12]
 800553c:	6833      	ldreq	r3, [r6, #0]
 800553e:	1aed      	subeq	r5, r5, r3
 8005540:	68a3      	ldr	r3, [r4, #8]
 8005542:	bf0c      	ite	eq
 8005544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005548:	2500      	movne	r5, #0
 800554a:	4293      	cmp	r3, r2
 800554c:	bfc4      	itt	gt
 800554e:	1a9b      	subgt	r3, r3, r2
 8005550:	18ed      	addgt	r5, r5, r3
 8005552:	2600      	movs	r6, #0
 8005554:	341a      	adds	r4, #26
 8005556:	42b5      	cmp	r5, r6
 8005558:	d11a      	bne.n	8005590 <_printf_common+0xc8>
 800555a:	2000      	movs	r0, #0
 800555c:	e008      	b.n	8005570 <_printf_common+0xa8>
 800555e:	2301      	movs	r3, #1
 8005560:	4652      	mov	r2, sl
 8005562:	4641      	mov	r1, r8
 8005564:	4638      	mov	r0, r7
 8005566:	47c8      	blx	r9
 8005568:	3001      	adds	r0, #1
 800556a:	d103      	bne.n	8005574 <_printf_common+0xac>
 800556c:	f04f 30ff 	mov.w	r0, #4294967295
 8005570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005574:	3501      	adds	r5, #1
 8005576:	e7c6      	b.n	8005506 <_printf_common+0x3e>
 8005578:	18e1      	adds	r1, r4, r3
 800557a:	1c5a      	adds	r2, r3, #1
 800557c:	2030      	movs	r0, #48	@ 0x30
 800557e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005582:	4422      	add	r2, r4
 8005584:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005588:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800558c:	3302      	adds	r3, #2
 800558e:	e7c7      	b.n	8005520 <_printf_common+0x58>
 8005590:	2301      	movs	r3, #1
 8005592:	4622      	mov	r2, r4
 8005594:	4641      	mov	r1, r8
 8005596:	4638      	mov	r0, r7
 8005598:	47c8      	blx	r9
 800559a:	3001      	adds	r0, #1
 800559c:	d0e6      	beq.n	800556c <_printf_common+0xa4>
 800559e:	3601      	adds	r6, #1
 80055a0:	e7d9      	b.n	8005556 <_printf_common+0x8e>
	...

080055a4 <_printf_i>:
 80055a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055a8:	7e0f      	ldrb	r7, [r1, #24]
 80055aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055ac:	2f78      	cmp	r7, #120	@ 0x78
 80055ae:	4691      	mov	r9, r2
 80055b0:	4680      	mov	r8, r0
 80055b2:	460c      	mov	r4, r1
 80055b4:	469a      	mov	sl, r3
 80055b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055ba:	d807      	bhi.n	80055cc <_printf_i+0x28>
 80055bc:	2f62      	cmp	r7, #98	@ 0x62
 80055be:	d80a      	bhi.n	80055d6 <_printf_i+0x32>
 80055c0:	2f00      	cmp	r7, #0
 80055c2:	f000 80d1 	beq.w	8005768 <_printf_i+0x1c4>
 80055c6:	2f58      	cmp	r7, #88	@ 0x58
 80055c8:	f000 80b8 	beq.w	800573c <_printf_i+0x198>
 80055cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055d4:	e03a      	b.n	800564c <_printf_i+0xa8>
 80055d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055da:	2b15      	cmp	r3, #21
 80055dc:	d8f6      	bhi.n	80055cc <_printf_i+0x28>
 80055de:	a101      	add	r1, pc, #4	@ (adr r1, 80055e4 <_printf_i+0x40>)
 80055e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055e4:	0800563d 	.word	0x0800563d
 80055e8:	08005651 	.word	0x08005651
 80055ec:	080055cd 	.word	0x080055cd
 80055f0:	080055cd 	.word	0x080055cd
 80055f4:	080055cd 	.word	0x080055cd
 80055f8:	080055cd 	.word	0x080055cd
 80055fc:	08005651 	.word	0x08005651
 8005600:	080055cd 	.word	0x080055cd
 8005604:	080055cd 	.word	0x080055cd
 8005608:	080055cd 	.word	0x080055cd
 800560c:	080055cd 	.word	0x080055cd
 8005610:	0800574f 	.word	0x0800574f
 8005614:	0800567b 	.word	0x0800567b
 8005618:	08005709 	.word	0x08005709
 800561c:	080055cd 	.word	0x080055cd
 8005620:	080055cd 	.word	0x080055cd
 8005624:	08005771 	.word	0x08005771
 8005628:	080055cd 	.word	0x080055cd
 800562c:	0800567b 	.word	0x0800567b
 8005630:	080055cd 	.word	0x080055cd
 8005634:	080055cd 	.word	0x080055cd
 8005638:	08005711 	.word	0x08005711
 800563c:	6833      	ldr	r3, [r6, #0]
 800563e:	1d1a      	adds	r2, r3, #4
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6032      	str	r2, [r6, #0]
 8005644:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005648:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800564c:	2301      	movs	r3, #1
 800564e:	e09c      	b.n	800578a <_printf_i+0x1e6>
 8005650:	6833      	ldr	r3, [r6, #0]
 8005652:	6820      	ldr	r0, [r4, #0]
 8005654:	1d19      	adds	r1, r3, #4
 8005656:	6031      	str	r1, [r6, #0]
 8005658:	0606      	lsls	r6, r0, #24
 800565a:	d501      	bpl.n	8005660 <_printf_i+0xbc>
 800565c:	681d      	ldr	r5, [r3, #0]
 800565e:	e003      	b.n	8005668 <_printf_i+0xc4>
 8005660:	0645      	lsls	r5, r0, #25
 8005662:	d5fb      	bpl.n	800565c <_printf_i+0xb8>
 8005664:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005668:	2d00      	cmp	r5, #0
 800566a:	da03      	bge.n	8005674 <_printf_i+0xd0>
 800566c:	232d      	movs	r3, #45	@ 0x2d
 800566e:	426d      	negs	r5, r5
 8005670:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005674:	4858      	ldr	r0, [pc, #352]	@ (80057d8 <_printf_i+0x234>)
 8005676:	230a      	movs	r3, #10
 8005678:	e011      	b.n	800569e <_printf_i+0xfa>
 800567a:	6821      	ldr	r1, [r4, #0]
 800567c:	6833      	ldr	r3, [r6, #0]
 800567e:	0608      	lsls	r0, r1, #24
 8005680:	f853 5b04 	ldr.w	r5, [r3], #4
 8005684:	d402      	bmi.n	800568c <_printf_i+0xe8>
 8005686:	0649      	lsls	r1, r1, #25
 8005688:	bf48      	it	mi
 800568a:	b2ad      	uxthmi	r5, r5
 800568c:	2f6f      	cmp	r7, #111	@ 0x6f
 800568e:	4852      	ldr	r0, [pc, #328]	@ (80057d8 <_printf_i+0x234>)
 8005690:	6033      	str	r3, [r6, #0]
 8005692:	bf14      	ite	ne
 8005694:	230a      	movne	r3, #10
 8005696:	2308      	moveq	r3, #8
 8005698:	2100      	movs	r1, #0
 800569a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800569e:	6866      	ldr	r6, [r4, #4]
 80056a0:	60a6      	str	r6, [r4, #8]
 80056a2:	2e00      	cmp	r6, #0
 80056a4:	db05      	blt.n	80056b2 <_printf_i+0x10e>
 80056a6:	6821      	ldr	r1, [r4, #0]
 80056a8:	432e      	orrs	r6, r5
 80056aa:	f021 0104 	bic.w	r1, r1, #4
 80056ae:	6021      	str	r1, [r4, #0]
 80056b0:	d04b      	beq.n	800574a <_printf_i+0x1a6>
 80056b2:	4616      	mov	r6, r2
 80056b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80056b8:	fb03 5711 	mls	r7, r3, r1, r5
 80056bc:	5dc7      	ldrb	r7, [r0, r7]
 80056be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056c2:	462f      	mov	r7, r5
 80056c4:	42bb      	cmp	r3, r7
 80056c6:	460d      	mov	r5, r1
 80056c8:	d9f4      	bls.n	80056b4 <_printf_i+0x110>
 80056ca:	2b08      	cmp	r3, #8
 80056cc:	d10b      	bne.n	80056e6 <_printf_i+0x142>
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	07df      	lsls	r7, r3, #31
 80056d2:	d508      	bpl.n	80056e6 <_printf_i+0x142>
 80056d4:	6923      	ldr	r3, [r4, #16]
 80056d6:	6861      	ldr	r1, [r4, #4]
 80056d8:	4299      	cmp	r1, r3
 80056da:	bfde      	ittt	le
 80056dc:	2330      	movle	r3, #48	@ 0x30
 80056de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056e6:	1b92      	subs	r2, r2, r6
 80056e8:	6122      	str	r2, [r4, #16]
 80056ea:	f8cd a000 	str.w	sl, [sp]
 80056ee:	464b      	mov	r3, r9
 80056f0:	aa03      	add	r2, sp, #12
 80056f2:	4621      	mov	r1, r4
 80056f4:	4640      	mov	r0, r8
 80056f6:	f7ff fee7 	bl	80054c8 <_printf_common>
 80056fa:	3001      	adds	r0, #1
 80056fc:	d14a      	bne.n	8005794 <_printf_i+0x1f0>
 80056fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005702:	b004      	add	sp, #16
 8005704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	f043 0320 	orr.w	r3, r3, #32
 800570e:	6023      	str	r3, [r4, #0]
 8005710:	4832      	ldr	r0, [pc, #200]	@ (80057dc <_printf_i+0x238>)
 8005712:	2778      	movs	r7, #120	@ 0x78
 8005714:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	6831      	ldr	r1, [r6, #0]
 800571c:	061f      	lsls	r7, r3, #24
 800571e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005722:	d402      	bmi.n	800572a <_printf_i+0x186>
 8005724:	065f      	lsls	r7, r3, #25
 8005726:	bf48      	it	mi
 8005728:	b2ad      	uxthmi	r5, r5
 800572a:	6031      	str	r1, [r6, #0]
 800572c:	07d9      	lsls	r1, r3, #31
 800572e:	bf44      	itt	mi
 8005730:	f043 0320 	orrmi.w	r3, r3, #32
 8005734:	6023      	strmi	r3, [r4, #0]
 8005736:	b11d      	cbz	r5, 8005740 <_printf_i+0x19c>
 8005738:	2310      	movs	r3, #16
 800573a:	e7ad      	b.n	8005698 <_printf_i+0xf4>
 800573c:	4826      	ldr	r0, [pc, #152]	@ (80057d8 <_printf_i+0x234>)
 800573e:	e7e9      	b.n	8005714 <_printf_i+0x170>
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	f023 0320 	bic.w	r3, r3, #32
 8005746:	6023      	str	r3, [r4, #0]
 8005748:	e7f6      	b.n	8005738 <_printf_i+0x194>
 800574a:	4616      	mov	r6, r2
 800574c:	e7bd      	b.n	80056ca <_printf_i+0x126>
 800574e:	6833      	ldr	r3, [r6, #0]
 8005750:	6825      	ldr	r5, [r4, #0]
 8005752:	6961      	ldr	r1, [r4, #20]
 8005754:	1d18      	adds	r0, r3, #4
 8005756:	6030      	str	r0, [r6, #0]
 8005758:	062e      	lsls	r6, r5, #24
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	d501      	bpl.n	8005762 <_printf_i+0x1be>
 800575e:	6019      	str	r1, [r3, #0]
 8005760:	e002      	b.n	8005768 <_printf_i+0x1c4>
 8005762:	0668      	lsls	r0, r5, #25
 8005764:	d5fb      	bpl.n	800575e <_printf_i+0x1ba>
 8005766:	8019      	strh	r1, [r3, #0]
 8005768:	2300      	movs	r3, #0
 800576a:	6123      	str	r3, [r4, #16]
 800576c:	4616      	mov	r6, r2
 800576e:	e7bc      	b.n	80056ea <_printf_i+0x146>
 8005770:	6833      	ldr	r3, [r6, #0]
 8005772:	1d1a      	adds	r2, r3, #4
 8005774:	6032      	str	r2, [r6, #0]
 8005776:	681e      	ldr	r6, [r3, #0]
 8005778:	6862      	ldr	r2, [r4, #4]
 800577a:	2100      	movs	r1, #0
 800577c:	4630      	mov	r0, r6
 800577e:	f7fa fd2f 	bl	80001e0 <memchr>
 8005782:	b108      	cbz	r0, 8005788 <_printf_i+0x1e4>
 8005784:	1b80      	subs	r0, r0, r6
 8005786:	6060      	str	r0, [r4, #4]
 8005788:	6863      	ldr	r3, [r4, #4]
 800578a:	6123      	str	r3, [r4, #16]
 800578c:	2300      	movs	r3, #0
 800578e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005792:	e7aa      	b.n	80056ea <_printf_i+0x146>
 8005794:	6923      	ldr	r3, [r4, #16]
 8005796:	4632      	mov	r2, r6
 8005798:	4649      	mov	r1, r9
 800579a:	4640      	mov	r0, r8
 800579c:	47d0      	blx	sl
 800579e:	3001      	adds	r0, #1
 80057a0:	d0ad      	beq.n	80056fe <_printf_i+0x15a>
 80057a2:	6823      	ldr	r3, [r4, #0]
 80057a4:	079b      	lsls	r3, r3, #30
 80057a6:	d413      	bmi.n	80057d0 <_printf_i+0x22c>
 80057a8:	68e0      	ldr	r0, [r4, #12]
 80057aa:	9b03      	ldr	r3, [sp, #12]
 80057ac:	4298      	cmp	r0, r3
 80057ae:	bfb8      	it	lt
 80057b0:	4618      	movlt	r0, r3
 80057b2:	e7a6      	b.n	8005702 <_printf_i+0x15e>
 80057b4:	2301      	movs	r3, #1
 80057b6:	4632      	mov	r2, r6
 80057b8:	4649      	mov	r1, r9
 80057ba:	4640      	mov	r0, r8
 80057bc:	47d0      	blx	sl
 80057be:	3001      	adds	r0, #1
 80057c0:	d09d      	beq.n	80056fe <_printf_i+0x15a>
 80057c2:	3501      	adds	r5, #1
 80057c4:	68e3      	ldr	r3, [r4, #12]
 80057c6:	9903      	ldr	r1, [sp, #12]
 80057c8:	1a5b      	subs	r3, r3, r1
 80057ca:	42ab      	cmp	r3, r5
 80057cc:	dcf2      	bgt.n	80057b4 <_printf_i+0x210>
 80057ce:	e7eb      	b.n	80057a8 <_printf_i+0x204>
 80057d0:	2500      	movs	r5, #0
 80057d2:	f104 0619 	add.w	r6, r4, #25
 80057d6:	e7f5      	b.n	80057c4 <_printf_i+0x220>
 80057d8:	08005a45 	.word	0x08005a45
 80057dc:	08005a56 	.word	0x08005a56

080057e0 <memmove>:
 80057e0:	4288      	cmp	r0, r1
 80057e2:	b510      	push	{r4, lr}
 80057e4:	eb01 0402 	add.w	r4, r1, r2
 80057e8:	d902      	bls.n	80057f0 <memmove+0x10>
 80057ea:	4284      	cmp	r4, r0
 80057ec:	4623      	mov	r3, r4
 80057ee:	d807      	bhi.n	8005800 <memmove+0x20>
 80057f0:	1e43      	subs	r3, r0, #1
 80057f2:	42a1      	cmp	r1, r4
 80057f4:	d008      	beq.n	8005808 <memmove+0x28>
 80057f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057fe:	e7f8      	b.n	80057f2 <memmove+0x12>
 8005800:	4402      	add	r2, r0
 8005802:	4601      	mov	r1, r0
 8005804:	428a      	cmp	r2, r1
 8005806:	d100      	bne.n	800580a <memmove+0x2a>
 8005808:	bd10      	pop	{r4, pc}
 800580a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800580e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005812:	e7f7      	b.n	8005804 <memmove+0x24>

08005814 <_sbrk_r>:
 8005814:	b538      	push	{r3, r4, r5, lr}
 8005816:	4d06      	ldr	r5, [pc, #24]	@ (8005830 <_sbrk_r+0x1c>)
 8005818:	2300      	movs	r3, #0
 800581a:	4604      	mov	r4, r0
 800581c:	4608      	mov	r0, r1
 800581e:	602b      	str	r3, [r5, #0]
 8005820:	f7fb fad0 	bl	8000dc4 <_sbrk>
 8005824:	1c43      	adds	r3, r0, #1
 8005826:	d102      	bne.n	800582e <_sbrk_r+0x1a>
 8005828:	682b      	ldr	r3, [r5, #0]
 800582a:	b103      	cbz	r3, 800582e <_sbrk_r+0x1a>
 800582c:	6023      	str	r3, [r4, #0]
 800582e:	bd38      	pop	{r3, r4, r5, pc}
 8005830:	200004b0 	.word	0x200004b0

08005834 <memcpy>:
 8005834:	440a      	add	r2, r1
 8005836:	4291      	cmp	r1, r2
 8005838:	f100 33ff 	add.w	r3, r0, #4294967295
 800583c:	d100      	bne.n	8005840 <memcpy+0xc>
 800583e:	4770      	bx	lr
 8005840:	b510      	push	{r4, lr}
 8005842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800584a:	4291      	cmp	r1, r2
 800584c:	d1f9      	bne.n	8005842 <memcpy+0xe>
 800584e:	bd10      	pop	{r4, pc}

08005850 <_realloc_r>:
 8005850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005854:	4607      	mov	r7, r0
 8005856:	4614      	mov	r4, r2
 8005858:	460d      	mov	r5, r1
 800585a:	b921      	cbnz	r1, 8005866 <_realloc_r+0x16>
 800585c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005860:	4611      	mov	r1, r2
 8005862:	f7ff bc4d 	b.w	8005100 <_malloc_r>
 8005866:	b92a      	cbnz	r2, 8005874 <_realloc_r+0x24>
 8005868:	f7ff fbde 	bl	8005028 <_free_r>
 800586c:	4625      	mov	r5, r4
 800586e:	4628      	mov	r0, r5
 8005870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005874:	f000 f81a 	bl	80058ac <_malloc_usable_size_r>
 8005878:	4284      	cmp	r4, r0
 800587a:	4606      	mov	r6, r0
 800587c:	d802      	bhi.n	8005884 <_realloc_r+0x34>
 800587e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005882:	d8f4      	bhi.n	800586e <_realloc_r+0x1e>
 8005884:	4621      	mov	r1, r4
 8005886:	4638      	mov	r0, r7
 8005888:	f7ff fc3a 	bl	8005100 <_malloc_r>
 800588c:	4680      	mov	r8, r0
 800588e:	b908      	cbnz	r0, 8005894 <_realloc_r+0x44>
 8005890:	4645      	mov	r5, r8
 8005892:	e7ec      	b.n	800586e <_realloc_r+0x1e>
 8005894:	42b4      	cmp	r4, r6
 8005896:	4622      	mov	r2, r4
 8005898:	4629      	mov	r1, r5
 800589a:	bf28      	it	cs
 800589c:	4632      	movcs	r2, r6
 800589e:	f7ff ffc9 	bl	8005834 <memcpy>
 80058a2:	4629      	mov	r1, r5
 80058a4:	4638      	mov	r0, r7
 80058a6:	f7ff fbbf 	bl	8005028 <_free_r>
 80058aa:	e7f1      	b.n	8005890 <_realloc_r+0x40>

080058ac <_malloc_usable_size_r>:
 80058ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058b0:	1f18      	subs	r0, r3, #4
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	bfbc      	itt	lt
 80058b6:	580b      	ldrlt	r3, [r1, r0]
 80058b8:	18c0      	addlt	r0, r0, r3
 80058ba:	4770      	bx	lr

080058bc <_init>:
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	bf00      	nop
 80058c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c2:	bc08      	pop	{r3}
 80058c4:	469e      	mov	lr, r3
 80058c6:	4770      	bx	lr

080058c8 <_fini>:
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	bf00      	nop
 80058cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ce:	bc08      	pop	{r3}
 80058d0:	469e      	mov	lr, r3
 80058d2:	4770      	bx	lr
